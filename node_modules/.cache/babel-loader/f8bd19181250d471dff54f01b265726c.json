{"ast":null,"code":"/*global describe*/\n\n/*global require*/\n\n/*global module*/\n\n/*global it*/\n\n/*global console*/\n\n/*global process*/\nvar Tableau = require(\"./Tableau.js\"); //-------------------------------------------------------------------\n// Function: solve\n// Detail: Main function, linear programming solver\n//-------------------------------------------------------------------\n\n\nTableau.prototype.simplex = function () {\n  // Bounded until proven otherwise\n  this.bounded = true; // Execute Phase 1 to obtain a Basic Feasible Solution (BFS)\n\n  this.phase1(); // Execute Phase 2\n\n  if (this.feasible === true) {\n    // Running simplex on Initial Basic Feasible Solution (BFS)\n    // N.B current solution is feasible\n    this.phase2();\n  }\n\n  return this;\n}; //-------------------------------------------------------------------\n// Description: Convert a non standard form tableau\n//              to a standard form tableau by eliminating\n//              all negative values in the Right Hand Side (RHS)\n//              This results in a Basic Feasible Solution (BFS)\n//\n//-------------------------------------------------------------------\n\n\nTableau.prototype.phase1 = function () {\n  var debugCheckForCycles = this.model.checkForCycles;\n  var varIndexesCycle = [];\n  var matrix = this.matrix;\n  var rhsColumn = this.rhsColumn;\n  var lastColumn = this.width - 1;\n  var lastRow = this.height - 1;\n  var unrestricted;\n  var iterations = 0;\n\n  while (true) {\n    // ******************************************\n    // ** PHASE 1 - STEP  1 : FIND PIVOT ROW **\n    //\n    // Selecting leaving variable (feasibility condition):\n    // Basic variable with most negative value\n    //\n    // ******************************************\n    var leavingRowIndex = 0;\n    var rhsValue = -this.precision;\n\n    for (var r = 1; r <= lastRow; r++) {\n      unrestricted = this.unrestrictedVars[this.varIndexByRow[r]] === true; //\n      // *Don't think this does anything...\n      //\n      //if (unrestricted) {\n      //    continue;\n      //}\n\n      var value = matrix[r][rhsColumn];\n\n      if (value < rhsValue) {\n        rhsValue = value;\n        leavingRowIndex = r;\n      }\n    } // If nothing is strictly smaller than 0; we're done with phase 1.\n\n\n    if (leavingRowIndex === 0) {\n      // Feasible, champagne!\n      this.feasible = true;\n      return iterations;\n    } // ******************************************\n    // ** PHASE 1 - STEP  2 : FIND PIVOT COLUMN **\n    //\n    //\n    // ******************************************\n    // Selecting entering variable\n\n\n    var enteringColumn = 0;\n    var maxQuotient = -Infinity;\n    var costRow = matrix[0];\n    var leavingRow = matrix[leavingRowIndex];\n\n    for (var c = 1; c <= lastColumn; c++) {\n      var coefficient = leavingRow[c]; //\n      // *Don't think this does anything...\n      //\n      //if (-this.precision < coefficient && coefficient < this.precision) {\n      //    continue;\n      //}\n      //\n\n      unrestricted = this.unrestrictedVars[this.varIndexByCol[c]] === true;\n\n      if (unrestricted || coefficient < -this.precision) {\n        var quotient = -costRow[c] / coefficient;\n\n        if (maxQuotient < quotient) {\n          maxQuotient = quotient;\n          enteringColumn = c;\n        }\n      }\n    }\n\n    if (enteringColumn === 0) {\n      // Not feasible\n      this.feasible = false;\n      return iterations;\n    }\n\n    if (debugCheckForCycles) {\n      varIndexesCycle.push([this.varIndexByRow[leavingRowIndex], this.varIndexByCol[enteringColumn]]);\n      var cycleData = this.checkForCycles(varIndexesCycle);\n\n      if (cycleData.length > 0) {\n        this.model.messages.push(\"Cycle in phase 1\");\n        this.model.messages.push(\"Start :\" + cycleData[0]);\n        this.model.messages.push(\"Length :\" + cycleData[1]);\n        this.feasible = false;\n        return iterations;\n      }\n    }\n\n    this.pivot(leavingRowIndex, enteringColumn);\n    iterations += 1;\n  }\n}; //-------------------------------------------------------------------\n// Description: Apply simplex to obtain optimal solution\n//              used as phase2 of the simplex\n//\n//-------------------------------------------------------------------\n\n\nTableau.prototype.phase2 = function () {\n  var debugCheckForCycles = this.model.checkForCycles;\n  var varIndexesCycle = [];\n  var matrix = this.matrix;\n  var rhsColumn = this.rhsColumn;\n  var lastColumn = this.width - 1;\n  var lastRow = this.height - 1;\n  var precision = this.precision;\n  var nOptionalObjectives = this.optionalObjectives.length;\n  var optionalCostsColumns = null;\n  var iterations = 0;\n  var reducedCost, unrestricted;\n\n  while (true) {\n    var costRow = matrix[this.costRowIndex]; // Selecting entering variable (optimality condition)\n\n    if (nOptionalObjectives > 0) {\n      optionalCostsColumns = [];\n    }\n\n    var enteringColumn = 0;\n    var enteringValue = precision;\n    var isReducedCostNegative = false;\n\n    for (var c = 1; c <= lastColumn; c++) {\n      reducedCost = costRow[c];\n      unrestricted = this.unrestrictedVars[this.varIndexByCol[c]] === true;\n\n      if (nOptionalObjectives > 0 && -precision < reducedCost && reducedCost < precision) {\n        optionalCostsColumns.push(c);\n        continue;\n      }\n\n      if (unrestricted && reducedCost < 0) {\n        if (-reducedCost > enteringValue) {\n          enteringValue = -reducedCost;\n          enteringColumn = c;\n          isReducedCostNegative = true;\n        }\n\n        continue;\n      }\n\n      if (reducedCost > enteringValue) {\n        enteringValue = reducedCost;\n        enteringColumn = c;\n        isReducedCostNegative = false;\n      }\n    }\n\n    if (nOptionalObjectives > 0) {\n      // There exist optional improvable objectives\n      var o = 0;\n\n      while (enteringColumn === 0 && optionalCostsColumns.length > 0 && o < nOptionalObjectives) {\n        var optionalCostsColumns2 = [];\n        var reducedCosts = this.optionalObjectives[o].reducedCosts;\n        enteringValue = precision;\n\n        for (var i = 0; i < optionalCostsColumns.length; i++) {\n          c = optionalCostsColumns[i];\n          reducedCost = reducedCosts[c];\n          unrestricted = this.unrestrictedVars[this.varIndexByCol[c]] === true;\n\n          if (-precision < reducedCost && reducedCost < precision) {\n            optionalCostsColumns2.push(c);\n            continue;\n          }\n\n          if (unrestricted && reducedCost < 0) {\n            if (-reducedCost > enteringValue) {\n              enteringValue = -reducedCost;\n              enteringColumn = c;\n              isReducedCostNegative = true;\n            }\n\n            continue;\n          }\n\n          if (reducedCost > enteringValue) {\n            enteringValue = reducedCost;\n            enteringColumn = c;\n            isReducedCostNegative = false;\n          }\n        }\n\n        optionalCostsColumns = optionalCostsColumns2;\n        o += 1;\n      }\n    } // If no entering column could be found we're done with phase 2.\n\n\n    if (enteringColumn === 0) {\n      this.setEvaluation();\n      this.simplexIters += 1;\n      return iterations;\n    } // Selecting leaving variable\n\n\n    var leavingRow = 0;\n    var minQuotient = Infinity;\n    var varIndexByRow = this.varIndexByRow;\n\n    for (var r = 1; r <= lastRow; r++) {\n      var row = matrix[r];\n      var rhsValue = row[rhsColumn];\n      var colValue = row[enteringColumn];\n\n      if (-precision < colValue && colValue < precision) {\n        continue;\n      }\n\n      if (colValue > 0 && precision > rhsValue && rhsValue > -precision) {\n        minQuotient = 0;\n        leavingRow = r;\n        break;\n      }\n\n      var quotient = isReducedCostNegative ? -rhsValue / colValue : rhsValue / colValue;\n\n      if (quotient > precision && minQuotient > quotient) {\n        minQuotient = quotient;\n        leavingRow = r;\n      }\n    }\n\n    if (minQuotient === Infinity) {\n      // optimal value is -Infinity\n      this.evaluation = -Infinity;\n      this.bounded = false;\n      this.unboundedVarIndex = this.varIndexByCol[enteringColumn];\n      return iterations;\n    }\n\n    if (debugCheckForCycles) {\n      varIndexesCycle.push([this.varIndexByRow[leavingRow], this.varIndexByCol[enteringColumn]]);\n      var cycleData = this.checkForCycles(varIndexesCycle);\n\n      if (cycleData.length > 0) {\n        this.model.messages.push(\"Cycle in phase 2\");\n        this.model.messages.push(\"Start :\" + cycleData[0]);\n        this.model.messages.push(\"Length :\" + cycleData[1]);\n        this.feasible = false;\n        return iterations;\n      }\n    }\n\n    this.pivot(leavingRow, enteringColumn, true);\n    iterations += 1;\n  }\n}; // Array holding the column indexes for which the value is not null\n// on the pivot row\n// Shared by all tableaux for smaller overhead and lower memory usage\n\n\nvar nonZeroColumns = []; //-------------------------------------------------------------------\n// Description: Execute pivot operations over a 2d array,\n//          on a given row, and column\n//\n//-------------------------------------------------------------------\n\nTableau.prototype.pivot = function (pivotRowIndex, pivotColumnIndex) {\n  var matrix = this.matrix;\n  var quotient = matrix[pivotRowIndex][pivotColumnIndex];\n  var lastRow = this.height - 1;\n  var lastColumn = this.width - 1;\n  var leavingBasicIndex = this.varIndexByRow[pivotRowIndex];\n  var enteringBasicIndex = this.varIndexByCol[pivotColumnIndex];\n  this.varIndexByRow[pivotRowIndex] = enteringBasicIndex;\n  this.varIndexByCol[pivotColumnIndex] = leavingBasicIndex;\n  this.rowByVarIndex[enteringBasicIndex] = pivotRowIndex;\n  this.rowByVarIndex[leavingBasicIndex] = -1;\n  this.colByVarIndex[enteringBasicIndex] = -1;\n  this.colByVarIndex[leavingBasicIndex] = pivotColumnIndex; // Divide everything in the target row by the element @\n  // the target column\n\n  var pivotRow = matrix[pivotRowIndex];\n  var nNonZeroColumns = 0;\n\n  for (var c = 0; c <= lastColumn; c++) {\n    if (!(pivotRow[c] >= -1e-16 && pivotRow[c] <= 1e-16)) {\n      pivotRow[c] /= quotient;\n      nonZeroColumns[nNonZeroColumns] = c;\n      nNonZeroColumns += 1;\n    } else {\n      pivotRow[c] = 0;\n    }\n  }\n\n  pivotRow[pivotColumnIndex] = 1 / quotient; // for every row EXCEPT the pivot row,\n  // set the value in the pivot column = 0 by\n  // multiplying the value of all elements in the objective\n  // row by ... yuck... just look below; better explanation later\n\n  var coefficient, i, v0;\n  var precision = this.precision; // //////////////////////////////////////\n  //\n  // This is step 2 of the pivot function.\n  // It is, by far, the most expensive piece of\n  // this whole process where the code can be optimized (faster code)\n  // without changing the whole algorithm (fewer cycles)\n  //\n  // 1.) For every row but the pivot row\n  // 2.) Update each column to \n  //    a.) itself\n  //        less\n  //    b.) active-row's pivot column\n  //        times\n  //    c.) whatever-the-hell this is: nonZeroColumns[i]\n  // \n  // //////////////////////////////////////\n  // console.time(\"step-2\");\n\n  for (var r = 0; r <= lastRow; r++) {\n    if (r !== pivotRowIndex) {\n      //if(1 === 1){\n      if (!(matrix[r][pivotColumnIndex] >= -1e-16 && matrix[r][pivotColumnIndex] <= 1e-16)) {\n        //if((matrix[r][pivotColumnIndex] !== 0)){\n        // Set reference to the row we're working on\n        //\n        var row = matrix[r]; // Catch the coefficient that we're going to end up dividing everything by\n\n        coefficient = row[pivotColumnIndex]; // No point Burning Cycles if\n        // Zero to the thing\n\n        if (!(coefficient >= -1e-16 && coefficient <= 1e-16)) {\n          for (i = 0; i < nNonZeroColumns; i++) {\n            c = nonZeroColumns[i]; // No point in doing math if you're just adding\n            // Zero to the thing\n\n            v0 = pivotRow[c];\n\n            if (!(v0 >= -1e-16 && v0 <= 1e-16)) {\n              row[c] = row[c] - coefficient * v0;\n            } else {\n              if (v0 !== 0) {\n                pivotRow[c] = 0;\n              }\n            }\n          }\n\n          row[pivotColumnIndex] = -coefficient / quotient;\n        } else {\n          if (coefficient !== 0) {\n            row[pivotColumnIndex] = 0;\n          }\n        }\n      }\n    }\n  } // console.timeEnd(\"step-2\");\n\n\n  var nOptionalObjectives = this.optionalObjectives.length;\n\n  if (nOptionalObjectives > 0) {\n    for (var o = 0; o < nOptionalObjectives; o += 1) {\n      var reducedCosts = this.optionalObjectives[o].reducedCosts;\n      coefficient = reducedCosts[pivotColumnIndex];\n\n      if (coefficient !== 0) {\n        for (i = 0; i < nNonZeroColumns; i++) {\n          c = nonZeroColumns[i];\n          v0 = pivotRow[c];\n\n          if (v0 !== 0) {\n            reducedCosts[c] = reducedCosts[c] - coefficient * v0;\n          }\n        }\n\n        reducedCosts[pivotColumnIndex] = -coefficient / quotient;\n      }\n    }\n  }\n};\n\nTableau.prototype.checkForCycles = function (varIndexes) {\n  for (var e1 = 0; e1 < varIndexes.length - 1; e1++) {\n    for (var e2 = e1 + 1; e2 < varIndexes.length; e2++) {\n      var elt1 = varIndexes[e1];\n      var elt2 = varIndexes[e2];\n\n      if (elt1[0] === elt2[0] && elt1[1] === elt2[1]) {\n        if (e2 - e1 > varIndexes.length - e2) {\n          break;\n        }\n\n        var cycleFound = true;\n\n        for (var i = 1; i < e2 - e1; i++) {\n          var tmp1 = varIndexes[e1 + i];\n          var tmp2 = varIndexes[e2 + i];\n\n          if (tmp1[0] !== tmp2[0] || tmp1[1] !== tmp2[1]) {\n            cycleFound = false;\n            break;\n          }\n        }\n\n        if (cycleFound) {\n          return [e1, e2 - e1];\n        }\n      }\n    }\n  }\n\n  return [];\n};","map":null,"metadata":{},"sourceType":"script"}