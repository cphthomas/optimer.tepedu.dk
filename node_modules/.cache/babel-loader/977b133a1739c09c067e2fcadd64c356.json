{"ast":null,"code":"/*global require*/\n\n/*global console*/\nvar Tableau = require(\"./Tableau.js\"); //-------------------------------------------------------------------\n//-------------------------------------------------------------------\n\n\nTableau.prototype._putInBase = function (varIndex) {\n  // Is varIndex in the base?\n  var r = this.rowByVarIndex[varIndex];\n\n  if (r === -1) {\n    // Outside the base\n    // pivoting to take it out\n    var c = this.colByVarIndex[varIndex]; // Selecting pivot row\n    // (Any row with coefficient different from 0)\n\n    for (var r1 = 1; r1 < this.height; r1 += 1) {\n      var coefficient = this.matrix[r1][c];\n\n      if (coefficient < -this.precision || this.precision < coefficient) {\n        r = r1;\n        break;\n      }\n    }\n\n    this.pivot(r, c);\n  }\n\n  return r;\n};\n\nTableau.prototype._takeOutOfBase = function (varIndex) {\n  // Is varIndex in the base?\n  var c = this.colByVarIndex[varIndex];\n\n  if (c === -1) {\n    // Inside the base\n    // pivoting to take it out\n    var r = this.rowByVarIndex[varIndex]; // Selecting pivot column\n    // (Any column with coefficient different from 0)\n\n    var pivotRow = this.matrix[r];\n\n    for (var c1 = 1; c1 < this.height; c1 += 1) {\n      var coefficient = pivotRow[c1];\n\n      if (coefficient < -this.precision || this.precision < coefficient) {\n        c = c1;\n        break;\n      }\n    }\n\n    this.pivot(r, c);\n  }\n\n  return c;\n};\n\nTableau.prototype.updateVariableValues = function () {\n  var nVars = this.variables.length;\n  var roundingCoeff = Math.round(1 / this.precision);\n\n  for (var v = 0; v < nVars; v += 1) {\n    var variable = this.variables[v];\n    var varIndex = variable.index;\n    var r = this.rowByVarIndex[varIndex];\n\n    if (r === -1) {\n      // Variable is non basic\n      variable.value = 0;\n    } else {\n      // Variable is basic\n      var varValue = this.matrix[r][this.rhsColumn];\n      variable.value = Math.round((varValue + Number.EPSILON) * roundingCoeff) / roundingCoeff;\n    }\n  }\n};\n\nTableau.prototype.updateRightHandSide = function (constraint, difference) {\n  // Updates RHS of given constraint\n  var lastRow = this.height - 1;\n  var constraintRow = this.rowByVarIndex[constraint.index];\n\n  if (constraintRow === -1) {\n    // Slack is not in base\n    var slackColumn = this.colByVarIndex[constraint.index]; // Upading all the RHS values\n\n    for (var r = 0; r <= lastRow; r += 1) {\n      var row = this.matrix[r];\n      row[this.rhsColumn] -= difference * row[slackColumn];\n    }\n\n    var nOptionalObjectives = this.optionalObjectives.length;\n\n    if (nOptionalObjectives > 0) {\n      for (var o = 0; o < nOptionalObjectives; o += 1) {\n        var reducedCosts = this.optionalObjectives[o].reducedCosts;\n        reducedCosts[this.rhsColumn] -= difference * reducedCosts[slackColumn];\n      }\n    }\n  } else {\n    // Slack variable of constraint is in base\n    // Updating RHS with the difference between the old and the new one\n    this.matrix[constraintRow][this.rhsColumn] -= difference;\n  }\n};\n\nTableau.prototype.updateConstraintCoefficient = function (constraint, variable, difference) {\n  // Updates variable coefficient within a constraint\n  if (constraint.index === variable.index) {\n    throw new Error(\"[Tableau.updateConstraintCoefficient] constraint index should not be equal to variable index !\");\n  }\n\n  var r = this._putInBase(constraint.index);\n\n  var colVar = this.colByVarIndex[variable.index];\n\n  if (colVar === -1) {\n    var rowVar = this.rowByVarIndex[variable.index];\n\n    for (var c = 0; c < this.width; c += 1) {\n      this.matrix[r][c] += difference * this.matrix[rowVar][c];\n    }\n  } else {\n    this.matrix[r][colVar] -= difference;\n  }\n};\n\nTableau.prototype.updateCost = function (variable, difference) {\n  // Updates variable coefficient within the objective function\n  var varIndex = variable.index;\n  var lastColumn = this.width - 1;\n  var varColumn = this.colByVarIndex[varIndex];\n\n  if (varColumn === -1) {\n    // Variable is in base\n    var variableRow = this.matrix[this.rowByVarIndex[varIndex]];\n    var c;\n\n    if (variable.priority === 0) {\n      var costRow = this.matrix[0]; // Upading all the reduced costs\n\n      for (c = 0; c <= lastColumn; c += 1) {\n        costRow[c] += difference * variableRow[c];\n      }\n    } else {\n      var reducedCosts = this.objectivesByPriority[variable.priority].reducedCosts;\n\n      for (c = 0; c <= lastColumn; c += 1) {\n        reducedCosts[c] += difference * variableRow[c];\n      }\n    }\n  } else {\n    // Variable is not in the base\n    // Updating coefficient with difference\n    this.matrix[0][varColumn] -= difference;\n  }\n};\n\nTableau.prototype.addConstraint = function (constraint) {\n  // Adds a constraint to the tableau\n  var sign = constraint.isUpperBound ? 1 : -1;\n  var lastRow = this.height;\n  var constraintRow = this.matrix[lastRow];\n\n  if (constraintRow === undefined) {\n    constraintRow = this.matrix[0].slice();\n    this.matrix[lastRow] = constraintRow;\n  } // Setting all row cells to 0\n\n\n  var lastColumn = this.width - 1;\n\n  for (var c = 0; c <= lastColumn; c += 1) {\n    constraintRow[c] = 0;\n  } // Initializing RHS\n\n\n  constraintRow[this.rhsColumn] = sign * constraint.rhs;\n  var terms = constraint.terms;\n  var nTerms = terms.length;\n\n  for (var t = 0; t < nTerms; t += 1) {\n    var term = terms[t];\n    var coefficient = term.coefficient;\n    var varIndex = term.variable.index;\n    var varRowIndex = this.rowByVarIndex[varIndex];\n\n    if (varRowIndex === -1) {\n      // Variable is non basic\n      constraintRow[this.colByVarIndex[varIndex]] += sign * coefficient;\n    } else {\n      // Variable is basic\n      var varRow = this.matrix[varRowIndex];\n      var varValue = varRow[this.rhsColumn];\n\n      for (c = 0; c <= lastColumn; c += 1) {\n        constraintRow[c] -= sign * coefficient * varRow[c];\n      }\n    }\n  } // Creating slack variable\n\n\n  var slackIndex = constraint.index;\n  this.varIndexByRow[lastRow] = slackIndex;\n  this.rowByVarIndex[slackIndex] = lastRow;\n  this.colByVarIndex[slackIndex] = -1;\n  this.height += 1;\n};\n\nTableau.prototype.removeConstraint = function (constraint) {\n  var slackIndex = constraint.index;\n  var lastRow = this.height - 1; // Putting the constraint's slack in the base\n\n  var r = this._putInBase(slackIndex); // Removing constraint\n  // by putting the corresponding row at the bottom of the matrix\n  // and virtually reducing the height of the matrix by 1\n\n\n  var tmpRow = this.matrix[lastRow];\n  this.matrix[lastRow] = this.matrix[r];\n  this.matrix[r] = tmpRow; // Removing associated slack variable from basic variables\n\n  this.varIndexByRow[r] = this.varIndexByRow[lastRow];\n  this.varIndexByRow[lastRow] = -1;\n  this.rowByVarIndex[slackIndex] = -1; // Putting associated slack variable index in index manager\n\n  this.availableIndexes[this.availableIndexes.length] = slackIndex;\n  constraint.slack.index = -1;\n  this.height -= 1;\n};\n\nTableau.prototype.addVariable = function (variable) {\n  // Adds a variable to the tableau\n  // var sign = constraint.isUpperBound ? 1 : -1;\n  var lastRow = this.height - 1;\n  var lastColumn = this.width;\n  var cost = this.model.isMinimization === true ? -variable.cost : variable.cost;\n  var priority = variable.priority; // Setting reduced costs\n\n  var nOptionalObjectives = this.optionalObjectives.length;\n\n  if (nOptionalObjectives > 0) {\n    for (var o = 0; o < nOptionalObjectives; o += 1) {\n      this.optionalObjectives[o].reducedCosts[lastColumn] = 0;\n    }\n  }\n\n  if (priority === 0) {\n    this.matrix[0][lastColumn] = cost;\n  } else {\n    this.setOptionalObjective(priority, lastColumn, cost);\n    this.matrix[0][lastColumn] = 0;\n  } // Setting all other column cells to 0\n\n\n  for (var r = 1; r <= lastRow; r += 1) {\n    this.matrix[r][lastColumn] = 0;\n  } // Adding variable to trackers\n\n\n  var varIndex = variable.index;\n  this.varIndexByCol[lastColumn] = varIndex;\n  this.rowByVarIndex[varIndex] = -1;\n  this.colByVarIndex[varIndex] = lastColumn;\n  this.width += 1;\n};\n\nTableau.prototype.removeVariable = function (variable) {\n  var varIndex = variable.index; // Putting the variable out of the base\n\n  var c = this._takeOutOfBase(varIndex);\n\n  var lastColumn = this.width - 1;\n\n  if (c !== lastColumn) {\n    var lastRow = this.height - 1;\n\n    for (var r = 0; r <= lastRow; r += 1) {\n      var row = this.matrix[r];\n      row[c] = row[lastColumn];\n    }\n\n    var nOptionalObjectives = this.optionalObjectives.length;\n\n    if (nOptionalObjectives > 0) {\n      for (var o = 0; o < nOptionalObjectives; o += 1) {\n        var reducedCosts = this.optionalObjectives[o].reducedCosts;\n        reducedCosts[c] = reducedCosts[lastColumn];\n      }\n    }\n\n    var switchVarIndex = this.varIndexByCol[lastColumn];\n    this.varIndexByCol[c] = switchVarIndex;\n    this.colByVarIndex[switchVarIndex] = c;\n  } // Removing variable from non basic variables\n\n\n  this.varIndexByCol[lastColumn] = -1;\n  this.colByVarIndex[varIndex] = -1; // Adding index into index manager\n\n  this.availableIndexes[this.availableIndexes.length] = varIndex;\n  variable.index = -1;\n  this.width -= 1;\n};","map":null,"metadata":{},"sourceType":"script"}