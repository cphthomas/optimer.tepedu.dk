{"ast":null,"code":"/*\n Highcharts JS v8.1.2 (2020-06-16)\n\n Annotations module\n\n (c) 2009-2019 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function (a) {\n  \"object\" === typeof module && module.exports ? (a[\"default\"] = a, module.exports = a) : \"function\" === typeof define && define.amd ? define(\"highcharts/modules/annotations\", [\"highcharts\"], function (p) {\n    a(p);\n    a.Highcharts = p;\n    return a;\n  }) : a(\"undefined\" !== typeof Highcharts ? Highcharts : void 0);\n})(function (a) {\n  function p(a, d, m, e) {\n    a.hasOwnProperty(d) || (a[d] = e.apply(null, m));\n  }\n\n  a = a ? a._modules : {};\n  p(a, \"annotations/eventEmitterMixin.js\", [a[\"parts/Globals.js\"], a[\"parts/Utilities.js\"]], function (a, d) {\n    var q = d.addEvent,\n        e = d.fireEvent,\n        v = d.inArray,\n        b = d.objectEach,\n        A = d.pick,\n        z = d.removeEvent;\n    return {\n      addEvents: function addEvents() {\n        var c = this,\n            h = function h(_h) {\n          q(_h, a.isTouchDevice ? \"touchstart\" : \"mousedown\", function (h) {\n            c.onMouseDown(h);\n          });\n        };\n\n        h(this.graphic.element);\n        (c.labels || []).forEach(function (c) {\n          c.options.useHTML && c.graphic.text && h(c.graphic.text.element);\n        });\n        b(c.options.events, function (h, b) {\n          var k = function k(g) {\n            \"click\" === b && c.cancelClick || h.call(c, c.chart.pointer.normalize(g), c.target);\n          };\n\n          if (-1 === v(b, c.nonDOMEvents || [])) c.graphic.on(b, k);else q(c, b, k);\n        });\n\n        if (c.options.draggable && (q(c, a.isTouchDevice ? \"touchmove\" : \"drag\", c.onDrag), !c.graphic.renderer.styledMode)) {\n          var r = {\n            cursor: {\n              x: \"ew-resize\",\n              y: \"ns-resize\",\n              xy: \"move\"\n            }[c.options.draggable]\n          };\n          c.graphic.css(r);\n          (c.labels || []).forEach(function (c) {\n            c.options.useHTML && c.graphic.text && c.graphic.text.css(r);\n          });\n        }\n\n        c.isUpdating || e(c, \"add\");\n      },\n      removeDocEvents: function removeDocEvents() {\n        this.removeDrag && (this.removeDrag = this.removeDrag());\n        this.removeMouseUp && (this.removeMouseUp = this.removeMouseUp());\n      },\n      onMouseDown: function onMouseDown(c) {\n        var h = this,\n            b = h.chart.pointer;\n        c.preventDefault && c.preventDefault();\n\n        if (2 !== c.button) {\n          c = b.normalize(c);\n          var x = c.chartX;\n          var k = c.chartY;\n          h.cancelClick = !1;\n          h.chart.hasDraggedAnnotation = !0;\n          h.removeDrag = q(a.doc, a.isTouchDevice ? \"touchmove\" : \"mousemove\", function (c) {\n            h.hasDragged = !0;\n            c = b.normalize(c);\n            c.prevChartX = x;\n            c.prevChartY = k;\n            e(h, \"drag\", c);\n            x = c.chartX;\n            k = c.chartY;\n          });\n          h.removeMouseUp = q(a.doc, a.isTouchDevice ? \"touchend\" : \"mouseup\", function (c) {\n            h.cancelClick = h.hasDragged;\n            h.hasDragged = !1;\n            h.chart.hasDraggedAnnotation = !1;\n            e(A(h.target, h), \"afterUpdate\");\n            h.onMouseUp(c);\n          });\n        }\n      },\n      onMouseUp: function onMouseUp(c) {\n        var h = this.chart;\n        c = this.target || this;\n        var b = h.options.annotations;\n        h = h.annotations.indexOf(c);\n        this.removeDocEvents();\n        b[h] = c.options;\n      },\n      onDrag: function onDrag(c) {\n        if (this.chart.isInsidePlot(c.chartX - this.chart.plotLeft, c.chartY - this.chart.plotTop)) {\n          var b = this.mouseMoveToTranslation(c);\n          \"x\" === this.options.draggable && (b.y = 0);\n          \"y\" === this.options.draggable && (b.x = 0);\n          this.points.length ? this.translate(b.x, b.y) : (this.shapes.forEach(function (c) {\n            c.translate(b.x, b.y);\n          }), this.labels.forEach(function (c) {\n            c.translate(b.x, b.y);\n          }));\n          this.redraw(!1);\n        }\n      },\n      mouseMoveToRadians: function mouseMoveToRadians(c, b, a) {\n        var h = c.prevChartY - a,\n            k = c.prevChartX - b;\n        a = c.chartY - a;\n        c = c.chartX - b;\n        this.chart.inverted && (b = k, k = h, h = b, b = c, c = a, a = b);\n        return Math.atan2(a, c) - Math.atan2(h, k);\n      },\n      mouseMoveToTranslation: function mouseMoveToTranslation(c) {\n        var b = c.chartX - c.prevChartX;\n        c = c.chartY - c.prevChartY;\n\n        if (this.chart.inverted) {\n          var a = c;\n          c = b;\n          b = a;\n        }\n\n        return {\n          x: b,\n          y: c\n        };\n      },\n      mouseMoveToScale: function mouseMoveToScale(c, b, a) {\n        b = (c.chartX - b || 1) / (c.prevChartX - b || 1);\n        c = (c.chartY - a || 1) / (c.prevChartY - a || 1);\n        this.chart.inverted && (a = c, c = b, b = a);\n        return {\n          x: b,\n          y: c\n        };\n      },\n      destroy: function destroy() {\n        this.removeDocEvents();\n        z(this);\n        this.hcEvents = null;\n      }\n    };\n  });\n  p(a, \"annotations/ControlPoint.js\", [a[\"parts/Utilities.js\"], a[\"annotations/eventEmitterMixin.js\"]], function (a, d) {\n    var q = a.merge,\n        e = a.pick;\n    return function () {\n      function a(b, a, v, c) {\n        this.addEvents = d.addEvents;\n        this.graphic = void 0;\n        this.mouseMoveToRadians = d.mouseMoveToRadians;\n        this.mouseMoveToScale = d.mouseMoveToScale;\n        this.mouseMoveToTranslation = d.mouseMoveToTranslation;\n        this.onDrag = d.onDrag;\n        this.onMouseDown = d.onMouseDown;\n        this.onMouseUp = d.onMouseUp;\n        this.removeDocEvents = d.removeDocEvents;\n        this.nonDOMEvents = [\"drag\"];\n        this.chart = b;\n        this.target = a;\n        this.options = v;\n        this.index = e(v.index, c);\n      }\n\n      a.prototype.setVisibility = function (b) {\n        this.graphic.attr(\"visibility\", b ? \"visible\" : \"hidden\");\n        this.options.visible = b;\n      };\n\n      a.prototype.render = function () {\n        var b = this.chart,\n            a = this.options;\n        this.graphic = b.renderer.symbol(a.symbol, 0, 0, a.width, a.height).add(b.controlPointsGroup).css(a.style);\n        this.setVisibility(a.visible);\n        this.addEvents();\n      };\n\n      a.prototype.redraw = function (b) {\n        this.graphic[b ? \"animate\" : \"attr\"](this.options.positioner.call(this, this.target));\n      };\n\n      a.prototype.destroy = function () {\n        d.destroy.call(this);\n        this.graphic && (this.graphic = this.graphic.destroy());\n        this.options = this.target = this.chart = null;\n      };\n\n      a.prototype.update = function (b) {\n        var a = this.chart,\n            d = this.target,\n            c = this.index;\n        b = q(!0, this.options, b);\n        this.destroy();\n        this.constructor(a, d, b, c);\n        this.render(a.controlPointsGroup);\n        this.redraw();\n      };\n\n      return a;\n    }();\n  });\n  p(a, \"annotations/MockPoint.js\", [a[\"parts/Globals.js\"], a[\"parts/Utilities.js\"]], function (a, d) {\n    var q = d.defined,\n        e = d.fireEvent;\n    return function () {\n      function d(b, d, e) {\n        this.y = this.x = this.plotY = this.plotX = this.isInside = void 0;\n        this.mock = !0;\n        this.series = {\n          visible: !0,\n          chart: b,\n          getPlotBox: a.Series.prototype.getPlotBox\n        };\n        this.target = d || null;\n        this.options = e;\n        this.applyOptions(this.getOptions());\n      }\n\n      d.fromPoint = function (b) {\n        return new d(b.series.chart, null, {\n          x: b.x,\n          y: b.y,\n          xAxis: b.series.xAxis,\n          yAxis: b.series.yAxis\n        });\n      };\n\n      d.pointToPixels = function (b, a) {\n        var d = b.series,\n            c = d.chart,\n            h = b.plotX,\n            r = b.plotY;\n        c.inverted && (b.mock ? (h = b.plotY, r = b.plotX) : (h = c.plotWidth - b.plotY, r = c.plotHeight - b.plotX));\n        d && !a && (b = d.getPlotBox(), h += b.translateX, r += b.translateY);\n        return {\n          x: h,\n          y: r\n        };\n      };\n\n      d.pointToOptions = function (b) {\n        return {\n          x: b.x,\n          y: b.y,\n          xAxis: b.series.xAxis,\n          yAxis: b.series.yAxis\n        };\n      };\n\n      d.prototype.hasDynamicOptions = function () {\n        return \"function\" === typeof this.options;\n      };\n\n      d.prototype.getOptions = function () {\n        return this.hasDynamicOptions() ? this.options(this.target) : this.options;\n      };\n\n      d.prototype.applyOptions = function (b) {\n        this.command = b.command;\n        this.setAxis(b, \"x\");\n        this.setAxis(b, \"y\");\n        this.refresh();\n      };\n\n      d.prototype.setAxis = function (b, d) {\n        d += \"Axis\";\n        b = b[d];\n        var e = this.series.chart;\n        this.series[d] = b instanceof a.Axis ? b : q(b) ? e[d][b] || e.get(b) : null;\n      };\n\n      d.prototype.toAnchor = function () {\n        var b = [this.plotX, this.plotY, 0, 0];\n        this.series.chart.inverted && (b[0] = this.plotY, b[1] = this.plotX);\n        return b;\n      };\n\n      d.prototype.getLabelConfig = function () {\n        return {\n          x: this.x,\n          y: this.y,\n          point: this\n        };\n      };\n\n      d.prototype.isInsidePlot = function () {\n        var b = this.plotX,\n            a = this.plotY,\n            d = this.series.xAxis,\n            c = this.series.yAxis,\n            h = {\n          x: b,\n          y: a,\n          isInsidePlot: !0\n        };\n        d && (h.isInsidePlot = q(b) && 0 <= b && b <= d.len);\n        c && (h.isInsidePlot = h.isInsidePlot && q(a) && 0 <= a && a <= c.len);\n        e(this.series.chart, \"afterIsInsidePlot\", h);\n        return h.isInsidePlot;\n      };\n\n      d.prototype.refresh = function () {\n        var b = this.series,\n            a = b.xAxis;\n        b = b.yAxis;\n        var d = this.getOptions();\n        a ? (this.x = d.x, this.plotX = a.toPixels(d.x, !0)) : (this.x = null, this.plotX = d.x);\n        b ? (this.y = d.y, this.plotY = b.toPixels(d.y, !0)) : (this.y = null, this.plotY = d.y);\n        this.isInside = this.isInsidePlot();\n      };\n\n      d.prototype.translate = function (b, a, d, c) {\n        this.hasDynamicOptions() || (this.plotX += d, this.plotY += c, this.refreshOptions());\n      };\n\n      d.prototype.scale = function (b, a, d, c) {\n        if (!this.hasDynamicOptions()) {\n          var h = this.plotY * c;\n          this.plotX = (1 - d) * b + this.plotX * d;\n          this.plotY = (1 - c) * a + h;\n          this.refreshOptions();\n        }\n      };\n\n      d.prototype.rotate = function (b, a, d) {\n        if (!this.hasDynamicOptions()) {\n          var c = Math.cos(d);\n          d = Math.sin(d);\n          var h = this.plotX,\n              e = this.plotY;\n          h -= b;\n          e -= a;\n          this.plotX = h * c - e * d + b;\n          this.plotY = h * d + e * c + a;\n          this.refreshOptions();\n        }\n      };\n\n      d.prototype.refreshOptions = function () {\n        var b = this.series,\n            a = b.xAxis;\n        b = b.yAxis;\n        this.x = this.options.x = a ? this.options.x = a.toValue(this.plotX, !0) : this.plotX;\n        this.y = this.options.y = b ? b.toValue(this.plotY, !0) : this.plotY;\n      };\n\n      return d;\n    }();\n  });\n  p(a, \"annotations/controllable/controllableMixin.js\", [a[\"annotations/ControlPoint.js\"], a[\"annotations/MockPoint.js\"], a[\"parts/Tooltip.js\"], a[\"parts/Utilities.js\"]], function (a, d, m, e) {\n    var q = e.isObject,\n        b = e.isString,\n        A = e.merge,\n        z = e.splat;\n    return {\n      init: function init(c, b, a) {\n        this.annotation = c;\n        this.chart = c.chart;\n        this.options = b;\n        this.points = [];\n        this.controlPoints = [];\n        this.index = a;\n        this.linkPoints();\n        this.addControlPoints();\n      },\n      attr: function attr() {\n        this.graphic.attr.apply(this.graphic, arguments);\n      },\n      getPointsOptions: function getPointsOptions() {\n        var c = this.options;\n        return c.points || c.point && z(c.point);\n      },\n      attrsFromOptions: function attrsFromOptions(c) {\n        var b = this.constructor.attrsMap,\n            a = {},\n            d,\n            k = this.chart.styledMode;\n\n        for (d in c) {\n          var e = b[d];\n          !e || k && -1 !== [\"fill\", \"stroke\", \"stroke-width\"].indexOf(e) || (a[e] = c[d]);\n        }\n\n        return a;\n      },\n      anchor: function anchor(c) {\n        var b = c.series.getPlotBox();\n        c = c.mock ? c.toAnchor() : m.prototype.getAnchor.call({\n          chart: c.series.chart\n        }, c);\n        c = {\n          x: c[0] + (this.options.x || 0),\n          y: c[1] + (this.options.y || 0),\n          height: c[2] || 0,\n          width: c[3] || 0\n        };\n        return {\n          relativePosition: c,\n          absolutePosition: A(c, {\n            x: c.x + b.translateX,\n            y: c.y + b.translateY\n          })\n        };\n      },\n      point: function point(c, a) {\n        if (c && c.series) return c;\n        a && null !== a.series || (q(c) ? a = new d(this.chart, this, c) : b(c) ? a = this.chart.get(c) || null : \"function\" === typeof c && (a = c.call(a, this), a = a.series ? a : new d(this.chart, this, c)));\n        return a;\n      },\n      linkPoints: function linkPoints() {\n        var c = this.getPointsOptions(),\n            b = this.points,\n            a = c && c.length || 0,\n            d;\n\n        for (d = 0; d < a; d++) {\n          var k = this.point(c[d], b[d]);\n\n          if (!k) {\n            b.length = 0;\n            return;\n          }\n\n          k.mock && k.refresh();\n          b[d] = k;\n        }\n\n        return b;\n      },\n      addControlPoints: function addControlPoints() {\n        var c = this.options.controlPoints;\n        (c || []).forEach(function (b, d) {\n          b = A(this.options.controlPointOptions, b);\n          b.index || (b.index = d);\n          c[d] = b;\n          this.controlPoints.push(new a(this.chart, this, b));\n        }, this);\n      },\n      shouldBeDrawn: function shouldBeDrawn() {\n        return !!this.points.length;\n      },\n      render: function render(c) {\n        this.controlPoints.forEach(function (c) {\n          c.render();\n        });\n      },\n      redraw: function redraw(c) {\n        this.controlPoints.forEach(function (b) {\n          b.redraw(c);\n        });\n      },\n      transform: function transform(c, b, a, d, k) {\n        if (this.chart.inverted) {\n          var h = b;\n          b = a;\n          a = h;\n        }\n\n        this.points.forEach(function (g, f) {\n          this.transformPoint(c, b, a, d, k, f);\n        }, this);\n      },\n      transformPoint: function transformPoint(c, b, a, e, k, y) {\n        var g = this.points[y];\n        g.mock || (g = this.points[y] = d.fromPoint(g));\n        g[c](b, a, e, k);\n      },\n      translate: function translate(c, b) {\n        this.transform(\"translate\", null, null, c, b);\n      },\n      translatePoint: function translatePoint(c, b, a) {\n        this.transformPoint(\"translate\", null, null, c, b, a);\n      },\n      translateShape: function translateShape(c, b) {\n        var a = this.annotation.chart,\n            d = this.annotation.userOptions,\n            k = a.annotations.indexOf(this.annotation);\n        a = a.options.annotations[k];\n        this.translatePoint(c, b, 0);\n        a[this.collection][this.index].point = this.options.point;\n        d[this.collection][this.index].point = this.options.point;\n      },\n      rotate: function rotate(c, b, a) {\n        this.transform(\"rotate\", c, b, a);\n      },\n      scale: function scale(c, b, a, d) {\n        this.transform(\"scale\", c, b, a, d);\n      },\n      setControlPointsVisibility: function setControlPointsVisibility(b) {\n        this.controlPoints.forEach(function (c) {\n          c.setVisibility(b);\n        });\n      },\n      destroy: function destroy() {\n        this.graphic && (this.graphic = this.graphic.destroy());\n        this.tracker && (this.tracker = this.tracker.destroy());\n        this.controlPoints.forEach(function (b) {\n          b.destroy();\n        });\n        this.options = this.controlPoints = this.points = this.chart = null;\n        this.annotation && (this.annotation = null);\n      },\n      update: function update(b) {\n        var c = this.annotation;\n        b = A(!0, this.options, b);\n        var a = this.graphic.parentGroup;\n        this.destroy();\n        this.constructor(c, b);\n        this.render(a);\n        this.redraw();\n      }\n    };\n  });\n  p(a, \"annotations/controllable/markerMixin.js\", [a[\"parts/Globals.js\"], a[\"parts/Utilities.js\"]], function (a, d) {\n    var q = d.addEvent,\n        e = d.defined,\n        v = d.merge,\n        b = d.objectEach,\n        A = d.uniqueKey,\n        z = {\n      arrow: {\n        tagName: \"marker\",\n        render: !1,\n        id: \"arrow\",\n        refY: 5,\n        refX: 9,\n        markerWidth: 10,\n        markerHeight: 10,\n        children: [{\n          tagName: \"path\",\n          d: \"M 0 0 L 10 5 L 0 10 Z\",\n          strokeWidth: 0\n        }]\n      },\n      \"reverse-arrow\": {\n        tagName: \"marker\",\n        render: !1,\n        id: \"reverse-arrow\",\n        refY: 5,\n        refX: 1,\n        markerWidth: 10,\n        markerHeight: 10,\n        children: [{\n          tagName: \"path\",\n          d: \"M 0 5 L 10 0 L 10 10 Z\",\n          strokeWidth: 0\n        }]\n      }\n    };\n\n    a.SVGRenderer.prototype.addMarker = function (b, a) {\n      var c = {\n        id: b\n      },\n          d = {\n        stroke: a.color || \"none\",\n        fill: a.color || \"rgba(0, 0, 0, 0.75)\"\n      };\n      c.children = a.children.map(function (b) {\n        return v(d, b);\n      });\n      a = this.definition(v(!0, {\n        markerWidth: 20,\n        markerHeight: 20,\n        refX: 0,\n        refY: 0,\n        orient: \"auto\"\n      }, a, c));\n      a.id = b;\n      return a;\n    };\n\n    d = function d(b) {\n      return function (c) {\n        this.attr(b, \"url(#\" + c + \")\");\n      };\n    };\n\n    d = {\n      markerEndSetter: d(\"marker-end\"),\n      markerStartSetter: d(\"marker-start\"),\n      setItemMarkers: function setItemMarkers(b) {\n        var c = b.options,\n            a = b.chart,\n            d = a.options.defs,\n            k = c.fill,\n            y = e(k) && \"none\" !== k ? k : c.stroke;\n        [\"markerStart\", \"markerEnd\"].forEach(function (g) {\n          var f = c[g],\n              k;\n\n          if (f) {\n            for (k in d) {\n              var e = d[k];\n\n              if (f === e.id && \"marker\" === e.tagName) {\n                var l = e;\n                break;\n              }\n            }\n\n            l && (f = b[g] = a.renderer.addMarker((c.id || A()) + \"-\" + l.id, v(l, {\n              color: y\n            })), b.attr(g, f.attr(\"id\")));\n          }\n        });\n      }\n    };\n    q(a.Chart, \"afterGetContainer\", function () {\n      this.options.defs = v(z, this.options.defs || {});\n      b(this.options.defs, function (b) {\n        \"marker\" === b.tagName && !1 !== b.render && this.renderer.addMarker(b.id, b);\n      }, this);\n    });\n    return d;\n  });\n  p(a, \"annotations/controllable/ControllablePath.js\", [a[\"annotations/controllable/controllableMixin.js\"], a[\"parts/Globals.js\"], a[\"annotations/controllable/markerMixin.js\"], a[\"parts/Utilities.js\"]], function (a, d, m, e) {\n    var q = e.extend;\n    e = e.merge;\n    var b = \"rgba(192,192,192,\" + (d.svg ? .0001 : .002) + \")\";\n\n    d = function d(b, a, c) {\n      this.init(b, a, c);\n      this.collection = \"shapes\";\n    };\n\n    d.attrsMap = {\n      dashStyle: \"dashstyle\",\n      strokeWidth: \"stroke-width\",\n      stroke: \"stroke\",\n      fill: \"fill\",\n      zIndex: \"zIndex\"\n    };\n    e(!0, d.prototype, a, {\n      type: \"path\",\n      setMarkers: m.setItemMarkers,\n      toD: function toD() {\n        var b = this.options.d;\n        if (b) return \"function\" === typeof b ? b.call(this) : b;\n        b = this.points;\n        var a = b.length,\n            c = a,\n            d = b[0],\n            e = c && this.anchor(d).absolutePosition,\n            x = 0,\n            k = [];\n        if (e) for (k.push([\"M\", e.x, e.y]); ++x < a && c;) {\n          d = b[x], c = d.command || \"L\", e = this.anchor(d).absolutePosition, \"M\" === c ? k.push([c, e.x, e.y]) : \"L\" === c ? k.push([c, e.x, e.y]) : \"Z\" === c && k.push([c]), c = d.series.visible;\n        }\n        return c ? this.chart.renderer.crispLine(k, this.graphic.strokeWidth()) : null;\n      },\n      shouldBeDrawn: function shouldBeDrawn() {\n        return a.shouldBeDrawn.call(this) || !!this.options.d;\n      },\n      render: function render(d) {\n        var e = this.options,\n            c = this.attrsFromOptions(e);\n        this.graphic = this.annotation.chart.renderer.path([[\"M\", 0, 0]]).attr(c).add(d);\n        e.className && this.graphic.addClass(e.className);\n        this.tracker = this.annotation.chart.renderer.path([[\"M\", 0, 0]]).addClass(\"highcharts-tracker-line\").attr({\n          zIndex: 2\n        }).add(d);\n        this.annotation.chart.styledMode || this.tracker.attr({\n          \"stroke-linejoin\": \"round\",\n          stroke: b,\n          fill: b,\n          \"stroke-width\": this.graphic.strokeWidth() + 2 * e.snap\n        });\n        a.render.call(this);\n        q(this.graphic, {\n          markerStartSetter: m.markerStartSetter,\n          markerEndSetter: m.markerEndSetter\n        });\n        this.setMarkers(this);\n      },\n      redraw: function redraw(b) {\n        var d = this.toD(),\n            c = b ? \"animate\" : \"attr\";\n        d ? (this.graphic[c]({\n          d: d\n        }), this.tracker[c]({\n          d: d\n        })) : (this.graphic.attr({\n          d: \"M 0 -9000000000\"\n        }), this.tracker.attr({\n          d: \"M 0 -9000000000\"\n        }));\n        this.graphic.placed = this.tracker.placed = !!d;\n        a.redraw.call(this, b);\n      }\n    });\n    return d;\n  });\n  p(a, \"annotations/controllable/ControllableRect.js\", [a[\"annotations/controllable/controllableMixin.js\"], a[\"annotations/controllable/ControllablePath.js\"], a[\"parts/Utilities.js\"]], function (a, d, m) {\n    m = m.merge;\n\n    var e = function e(a, b, d) {\n      this.init(a, b, d);\n      this.collection = \"shapes\";\n    };\n\n    e.attrsMap = m(d.attrsMap, {\n      width: \"width\",\n      height: \"height\"\n    });\n    m(!0, e.prototype, a, {\n      type: \"rect\",\n      translate: a.translateShape,\n      render: function render(d) {\n        var b = this.attrsFromOptions(this.options);\n        this.graphic = this.annotation.chart.renderer.rect(0, -9E9, 0, 0).attr(b).add(d);\n        a.render.call(this);\n      },\n      redraw: function redraw(d) {\n        var b = this.anchor(this.points[0]).absolutePosition;\n        if (b) this.graphic[d ? \"animate\" : \"attr\"]({\n          x: b.x,\n          y: b.y,\n          width: this.options.width,\n          height: this.options.height\n        });else this.attr({\n          x: 0,\n          y: -9E9\n        });\n        this.graphic.placed = !!b;\n        a.redraw.call(this, d);\n      }\n    });\n    return e;\n  });\n  p(a, \"annotations/controllable/ControllableCircle.js\", [a[\"annotations/controllable/controllableMixin.js\"], a[\"annotations/controllable/ControllablePath.js\"], a[\"parts/Utilities.js\"]], function (a, d, m) {\n    m = m.merge;\n\n    var e = function e(a, b, d) {\n      this.init(a, b, d);\n      this.collection = \"shapes\";\n    };\n\n    e.attrsMap = m(d.attrsMap, {\n      r: \"r\"\n    });\n    m(!0, e.prototype, a, {\n      type: \"circle\",\n      translate: a.translateShape,\n      render: function render(d) {\n        var b = this.attrsFromOptions(this.options);\n        this.graphic = this.annotation.chart.renderer.circle(0, -9E9, 0).attr(b).add(d);\n        a.render.call(this);\n      },\n      redraw: function redraw(d) {\n        var b = this.anchor(this.points[0]).absolutePosition;\n        if (b) this.graphic[d ? \"animate\" : \"attr\"]({\n          x: b.x,\n          y: b.y,\n          r: this.options.r\n        });else this.graphic.attr({\n          x: 0,\n          y: -9E9\n        });\n        this.graphic.placed = !!b;\n        a.redraw.call(this, d);\n      },\n      setRadius: function setRadius(a) {\n        this.options.r = a;\n      }\n    });\n    return e;\n  });\n  p(a, \"annotations/controllable/ControllableLabel.js\", [a[\"annotations/controllable/controllableMixin.js\"], a[\"parts/Globals.js\"], a[\"annotations/MockPoint.js\"], a[\"parts/Tooltip.js\"], a[\"parts/Utilities.js\"]], function (a, d, m, e, v) {\n    var b = v.extend,\n        q = v.format,\n        p = v.isNumber,\n        c = v.merge,\n        h = v.pick,\n        r = function r(b, a, c) {\n      this.init(b, a, c);\n      this.collection = \"labels\";\n    };\n\n    r.shapesWithoutBackground = [\"connector\"];\n\n    r.alignedPosition = function (b, a) {\n      var c = b.align,\n          d = b.verticalAlign,\n          f = (a.x || 0) + (b.x || 0),\n          k = (a.y || 0) + (b.y || 0),\n          e,\n          l;\n      \"right\" === c ? e = 1 : \"center\" === c && (e = 2);\n      e && (f += (a.width - (b.width || 0)) / e);\n      \"bottom\" === d ? l = 1 : \"middle\" === d && (l = 2);\n      l && (k += (a.height - (b.height || 0)) / l);\n      return {\n        x: Math.round(f),\n        y: Math.round(k)\n      };\n    };\n\n    r.justifiedOptions = function (b, a, c, d) {\n      var f = c.align,\n          g = c.verticalAlign,\n          e = a.box ? 0 : a.padding || 0,\n          k = a.getBBox();\n      a = {\n        align: f,\n        verticalAlign: g,\n        x: c.x,\n        y: c.y,\n        width: a.width,\n        height: a.height\n      };\n      c = d.x - b.plotLeft;\n      var t = d.y - b.plotTop;\n      d = c + e;\n      0 > d && (\"right\" === f ? a.align = \"left\" : a.x = -d);\n      d = c + k.width - e;\n      d > b.plotWidth && (\"left\" === f ? a.align = \"right\" : a.x = b.plotWidth - d);\n      d = t + e;\n      0 > d && (\"bottom\" === g ? a.verticalAlign = \"top\" : a.y = -d);\n      d = t + k.height - e;\n      d > b.plotHeight && (\"top\" === g ? a.verticalAlign = \"bottom\" : a.y = b.plotHeight - d);\n      return a;\n    };\n\n    r.attrsMap = {\n      backgroundColor: \"fill\",\n      borderColor: \"stroke\",\n      borderWidth: \"stroke-width\",\n      zIndex: \"zIndex\",\n      borderRadius: \"r\",\n      padding: \"padding\"\n    };\n    c(!0, r.prototype, a, {\n      translatePoint: function translatePoint(b, c) {\n        a.translatePoint.call(this, b, c, 0);\n      },\n      translate: function translate(b, a) {\n        var c = this.annotation.chart,\n            d = this.annotation.userOptions,\n            f = c.annotations.indexOf(this.annotation);\n        f = c.options.annotations[f];\n        c.inverted && (c = b, b = a, a = c);\n        this.options.x += b;\n        this.options.y += a;\n        f[this.collection][this.index].x = this.options.x;\n        f[this.collection][this.index].y = this.options.y;\n        d[this.collection][this.index].x = this.options.x;\n        d[this.collection][this.index].y = this.options.y;\n      },\n      render: function render(b) {\n        var c = this.options,\n            d = this.attrsFromOptions(c),\n            g = c.style;\n        this.graphic = this.annotation.chart.renderer.label(\"\", 0, -9999, c.shape, null, null, c.useHTML, null, \"annotation-label\").attr(d).add(b);\n        this.annotation.chart.styledMode || (\"contrast\" === g.color && (g.color = this.annotation.chart.renderer.getContrast(-1 < r.shapesWithoutBackground.indexOf(c.shape) ? \"#FFFFFF\" : c.backgroundColor)), this.graphic.css(c.style).shadow(c.shadow));\n        c.className && this.graphic.addClass(c.className);\n        this.graphic.labelrank = c.labelrank;\n        a.render.call(this);\n      },\n      redraw: function redraw(b) {\n        var c = this.options,\n            d = this.text || c.format || c.text,\n            g = this.graphic,\n            f = this.points[0];\n        g.attr({\n          text: d ? q(d, f.getLabelConfig(), this.annotation.chart) : c.formatter.call(f, this)\n        });\n        c = this.anchor(f);\n        (d = this.position(c)) ? (g.alignAttr = d, d.anchorX = c.absolutePosition.x, d.anchorY = c.absolutePosition.y, g[b ? \"animate\" : \"attr\"](d)) : g.attr({\n          x: 0,\n          y: -9999\n        });\n        g.placed = !!d;\n        a.redraw.call(this, b);\n      },\n      anchor: function anchor() {\n        var b = a.anchor.apply(this, arguments),\n            c = this.options.x || 0,\n            d = this.options.y || 0;\n        b.absolutePosition.x -= c;\n        b.absolutePosition.y -= d;\n        b.relativePosition.x -= c;\n        b.relativePosition.y -= d;\n        return b;\n      },\n      position: function position(c) {\n        var a = this.graphic,\n            d = this.annotation.chart,\n            g = this.points[0],\n            f = this.options,\n            n = c.absolutePosition,\n            u = c.relativePosition;\n\n        if (c = g.series.visible && m.prototype.isInsidePlot.call(g)) {\n          if (f.distance) var l = e.prototype.getPosition.call({\n            chart: d,\n            distance: h(f.distance, 16)\n          }, a.width, a.height, {\n            plotX: u.x,\n            plotY: u.y,\n            negative: g.negative,\n            ttBelow: g.ttBelow,\n            h: u.height || u.width\n          });else f.positioner ? l = f.positioner.call(this) : (g = {\n            x: n.x,\n            y: n.y,\n            width: 0,\n            height: 0\n          }, l = r.alignedPosition(b(f, {\n            width: a.width,\n            height: a.height\n          }), g), \"justify\" === this.options.overflow && (l = r.alignedPosition(r.justifiedOptions(d, a, f, l), g)));\n          f.crop && (f = l.x - d.plotLeft, g = l.y - d.plotTop, c = d.isInsidePlot(f, g) && d.isInsidePlot(f + a.width, g + a.height));\n        }\n\n        return c ? l : null;\n      }\n    });\n\n    d.SVGRenderer.prototype.symbols.connector = function (b, c, a, d, f) {\n      var g = f && f.anchorX;\n      f = f && f.anchorY;\n      var e = a / 2;\n\n      if (p(g) && p(f)) {\n        var l = [[\"M\", g, f]];\n        var t = c - f;\n        0 > t && (t = -d - t);\n        t < a && (e = g < b + a / 2 ? t : a - t);\n        f > c + d ? l.push([\"L\", b + e, c + d]) : f < c ? l.push([\"L\", b + e, c]) : g < b ? l.push([\"L\", b, c + d / 2]) : g > b + a && l.push([\"L\", b + a, c + d / 2]);\n      }\n\n      return l || [];\n    };\n\n    return r;\n  });\n  p(a, \"annotations/controllable/ControllableImage.js\", [a[\"annotations/controllable/ControllableLabel.js\"], a[\"annotations/controllable/controllableMixin.js\"], a[\"parts/Utilities.js\"]], function (a, d, m) {\n    m = m.merge;\n\n    var e = function e(a, b, d) {\n      this.init(a, b, d);\n      this.collection = \"shapes\";\n    };\n\n    e.attrsMap = {\n      width: \"width\",\n      height: \"height\",\n      zIndex: \"zIndex\"\n    };\n    m(!0, e.prototype, d, {\n      type: \"image\",\n      translate: d.translateShape,\n      render: function render(a) {\n        var b = this.attrsFromOptions(this.options),\n            e = this.options;\n        this.graphic = this.annotation.chart.renderer.image(e.src, 0, -9E9, e.width, e.height).attr(b).add(a);\n        this.graphic.width = e.width;\n        this.graphic.height = e.height;\n        d.render.call(this);\n      },\n      redraw: function redraw(e) {\n        var b = this.anchor(this.points[0]);\n        if (b = a.prototype.position.call(this, b)) this.graphic[e ? \"animate\" : \"attr\"]({\n          x: b.x,\n          y: b.y\n        });else this.graphic.attr({\n          x: 0,\n          y: -9E9\n        });\n        this.graphic.placed = !!b;\n        d.redraw.call(this, e);\n      }\n    });\n    return e;\n  });\n  p(a, \"annotations/annotations.src.js\", [a[\"parts/Chart.js\"], a[\"annotations/controllable/controllableMixin.js\"], a[\"annotations/controllable/ControllableRect.js\"], a[\"annotations/controllable/ControllableCircle.js\"], a[\"annotations/controllable/ControllablePath.js\"], a[\"annotations/controllable/ControllableImage.js\"], a[\"annotations/controllable/ControllableLabel.js\"], a[\"annotations/ControlPoint.js\"], a[\"annotations/eventEmitterMixin.js\"], a[\"parts/Globals.js\"], a[\"annotations/MockPoint.js\"], a[\"parts/Pointer.js\"], a[\"parts/Utilities.js\"]], function (a, d, m, e, v, b, p, z, c, h, r, x, k) {\n    a = a.prototype;\n    var q = k.addEvent,\n        g = k.defined,\n        f = k.destroyObjectProperties,\n        n = k.erase,\n        u = k.extend,\n        l = k.find,\n        t = k.fireEvent,\n        w = k.merge,\n        C = k.pick,\n        D = k.splat;\n    k = k.wrap;\n\n    var B = function () {\n      function a(a, b) {\n        this.annotation = void 0;\n        this.coll = \"annotations\";\n        this.shapesGroup = this.labelsGroup = this.labelCollector = this.group = this.graphic = this.collection = void 0;\n        this.chart = a;\n        this.points = [];\n        this.controlPoints = [];\n        this.coll = \"annotations\";\n        this.labels = [];\n        this.shapes = [];\n        this.options = w(this.defaultOptions, b);\n        this.userOptions = b;\n        b = this.getLabelsAndShapesOptions(this.options, b);\n        this.options.labels = b.labels;\n        this.options.shapes = b.shapes;\n        this.init(a, this.options);\n      }\n\n      a.prototype.init = function () {\n        this.linkPoints();\n        this.addControlPoints();\n        this.addShapes();\n        this.addLabels();\n        this.setLabelCollector();\n      };\n\n      a.prototype.getLabelsAndShapesOptions = function (a, b) {\n        var c = {};\n        [\"labels\", \"shapes\"].forEach(function (d) {\n          a[d] && (c[d] = D(b[d]).map(function (b, c) {\n            return w(a[d][c], b);\n          }));\n        });\n        return c;\n      };\n\n      a.prototype.addShapes = function () {\n        (this.options.shapes || []).forEach(function (a, b) {\n          a = this.initShape(a, b);\n          w(!0, this.options.shapes[b], a.options);\n        }, this);\n      };\n\n      a.prototype.addLabels = function () {\n        (this.options.labels || []).forEach(function (a, b) {\n          a = this.initLabel(a, b);\n          w(!0, this.options.labels[b], a.options);\n        }, this);\n      };\n\n      a.prototype.addClipPaths = function () {\n        this.setClipAxes();\n        this.clipXAxis && this.clipYAxis && (this.clipRect = this.chart.renderer.clipRect(this.getClipBox()));\n      };\n\n      a.prototype.setClipAxes = function () {\n        var a = this.chart.xAxis,\n            b = this.chart.yAxis,\n            c = (this.options.labels || []).concat(this.options.shapes || []).reduce(function (c, d) {\n          return [a[d && d.point && d.point.xAxis] || c[0], b[d && d.point && d.point.yAxis] || c[1]];\n        }, []);\n        this.clipXAxis = c[0];\n        this.clipYAxis = c[1];\n      };\n\n      a.prototype.getClipBox = function () {\n        if (this.clipXAxis && this.clipYAxis) return {\n          x: this.clipXAxis.left,\n          y: this.clipYAxis.top,\n          width: this.clipXAxis.width,\n          height: this.clipYAxis.height\n        };\n      };\n\n      a.prototype.setLabelCollector = function () {\n        var a = this;\n\n        a.labelCollector = function () {\n          return a.labels.reduce(function (a, b) {\n            b.options.allowOverlap || a.push(b.graphic);\n            return a;\n          }, []);\n        };\n\n        a.chart.labelCollectors.push(a.labelCollector);\n      };\n\n      a.prototype.setOptions = function (a) {\n        this.options = w(this.defaultOptions, a);\n      };\n\n      a.prototype.redraw = function (a) {\n        this.linkPoints();\n        this.graphic || this.render();\n        this.clipRect && this.clipRect.animate(this.getClipBox());\n        this.redrawItems(this.shapes, a);\n        this.redrawItems(this.labels, a);\n        d.redraw.call(this, a);\n      };\n\n      a.prototype.redrawItems = function (a, b) {\n        for (var c = a.length; c--;) {\n          this.redrawItem(a[c], b);\n        }\n      };\n\n      a.prototype.renderItems = function (a) {\n        for (var b = a.length; b--;) {\n          this.renderItem(a[b]);\n        }\n      };\n\n      a.prototype.render = function () {\n        var a = this.chart.renderer;\n        this.graphic = a.g(\"annotation\").attr({\n          zIndex: this.options.zIndex,\n          visibility: this.options.visible ? \"visible\" : \"hidden\"\n        }).add();\n        this.shapesGroup = a.g(\"annotation-shapes\").add(this.graphic).clip(this.chart.plotBoxClip);\n        this.labelsGroup = a.g(\"annotation-labels\").attr({\n          translateX: 0,\n          translateY: 0\n        }).add(this.graphic);\n        this.addClipPaths();\n        this.clipRect && this.graphic.clip(this.clipRect);\n        this.renderItems(this.shapes);\n        this.renderItems(this.labels);\n        this.addEvents();\n        d.render.call(this);\n      };\n\n      a.prototype.setVisibility = function (a) {\n        var b = this.options;\n        a = C(a, !b.visible);\n        this.graphic.attr(\"visibility\", a ? \"visible\" : \"hidden\");\n        a || this.setControlPointsVisibility(!1);\n        b.visible = a;\n      };\n\n      a.prototype.setControlPointsVisibility = function (a) {\n        var b = function b(_b) {\n          _b.setControlPointsVisibility(a);\n        };\n\n        d.setControlPointsVisibility.call(this, a);\n        this.shapes.forEach(b);\n        this.labels.forEach(b);\n      };\n\n      a.prototype.destroy = function () {\n        var a = this.chart,\n            b = function b(a) {\n          a.destroy();\n        };\n\n        this.labels.forEach(b);\n        this.shapes.forEach(b);\n        this.clipYAxis = this.clipXAxis = null;\n        n(a.labelCollectors, this.labelCollector);\n        c.destroy.call(this);\n        d.destroy.call(this);\n        f(this, a);\n      };\n\n      a.prototype.remove = function () {\n        return this.chart.removeAnnotation(this);\n      };\n\n      a.prototype.update = function (a, b) {\n        var c = this.chart,\n            d = this.getLabelsAndShapesOptions(this.userOptions, a),\n            f = c.annotations.indexOf(this);\n        a = w(!0, this.userOptions, a);\n        a.labels = d.labels;\n        a.shapes = d.shapes;\n        this.destroy();\n        this.constructor(c, a);\n        c.options.annotations[f] = a;\n        this.isUpdating = !0;\n        C(b, !0) && c.redraw();\n        t(this, \"afterUpdate\");\n        this.isUpdating = !1;\n      };\n\n      a.prototype.initShape = function (b, c) {\n        b = w(this.options.shapeOptions, {\n          controlPointOptions: this.options.controlPointOptions\n        }, b);\n        c = new a.shapesMap[b.type](this, b, c);\n        c.itemType = \"shape\";\n        this.shapes.push(c);\n        return c;\n      };\n\n      a.prototype.initLabel = function (a, b) {\n        a = w(this.options.labelOptions, {\n          controlPointOptions: this.options.controlPointOptions\n        }, a);\n        b = new p(this, a, b);\n        b.itemType = \"label\";\n        this.labels.push(b);\n        return b;\n      };\n\n      a.prototype.redrawItem = function (a, b) {\n        a.linkPoints();\n        a.shouldBeDrawn() ? (a.graphic || this.renderItem(a), a.redraw(C(b, !0) && a.graphic.placed), a.points.length && this.adjustVisibility(a)) : this.destroyItem(a);\n      };\n\n      a.prototype.adjustVisibility = function (a) {\n        var b = !1,\n            c = a.graphic;\n        a.points.forEach(function (a) {\n          !1 !== a.series.visible && !1 !== a.visible && (b = !0);\n        });\n        b ? \"hidden\" === c.visibility && c.show() : c.hide();\n      };\n\n      a.prototype.destroyItem = function (a) {\n        n(this[a.itemType + \"s\"], a);\n        a.destroy();\n      };\n\n      a.prototype.renderItem = function (a) {\n        a.render(\"label\" === a.itemType ? this.labelsGroup : this.shapesGroup);\n      };\n\n      a.ControlPoint = z;\n      a.MockPoint = r;\n      a.shapesMap = {\n        rect: m,\n        circle: e,\n        path: v,\n        image: b\n      };\n      a.types = {};\n      return a;\n    }();\n\n    w(!0, B.prototype, d, c, w(B.prototype, {\n      nonDOMEvents: [\"add\", \"afterUpdate\", \"drag\", \"remove\"],\n      defaultOptions: {\n        visible: !0,\n        draggable: \"xy\",\n        labelOptions: {\n          align: \"center\",\n          allowOverlap: !1,\n          backgroundColor: \"rgba(0, 0, 0, 0.75)\",\n          borderColor: \"black\",\n          borderRadius: 3,\n          borderWidth: 1,\n          className: \"\",\n          crop: !1,\n          formatter: function formatter() {\n            return g(this.y) ? this.y : \"Annotation label\";\n          },\n          overflow: \"justify\",\n          padding: 5,\n          shadow: !1,\n          shape: \"callout\",\n          style: {\n            fontSize: \"11px\",\n            fontWeight: \"normal\",\n            color: \"contrast\"\n          },\n          useHTML: !1,\n          verticalAlign: \"bottom\",\n          x: 0,\n          y: -16\n        },\n        shapeOptions: {\n          stroke: \"rgba(0, 0, 0, 0.75)\",\n          strokeWidth: 1,\n          fill: \"rgba(0, 0, 0, 0.75)\",\n          r: 0,\n          snap: 2\n        },\n        controlPointOptions: {\n          symbol: \"circle\",\n          width: 10,\n          height: 10,\n          style: {\n            stroke: \"black\",\n            \"stroke-width\": 2,\n            fill: \"white\"\n          },\n          visible: !1,\n          events: {}\n        },\n        events: {},\n        zIndex: 6\n      }\n    }));\n\n    h.extendAnnotation = function (a, b, c, d) {\n      b = b || B;\n      w(!0, a.prototype, b.prototype, c);\n      a.prototype.defaultOptions = w(a.prototype.defaultOptions, d || {});\n    };\n\n    u(a, {\n      initAnnotation: function initAnnotation(a) {\n        a = new (B.types[a.type] || B)(this, a);\n        this.annotations.push(a);\n        return a;\n      },\n      addAnnotation: function addAnnotation(a, b) {\n        a = this.initAnnotation(a);\n        this.options.annotations.push(a.options);\n        C(b, !0) && a.redraw();\n        return a;\n      },\n      removeAnnotation: function removeAnnotation(a) {\n        var b = this.annotations,\n            c = \"annotations\" === a.coll ? a : l(b, function (b) {\n          return b.options.id === a;\n        });\n        c && (t(c, \"remove\"), n(this.options.annotations, c.options), n(b, c), c.destroy());\n      },\n      drawAnnotations: function drawAnnotations() {\n        this.plotBoxClip.attr(this.plotBox);\n        this.annotations.forEach(function (a) {\n          a.redraw();\n        });\n      }\n    });\n    a.collectionsWithUpdate.push(\"annotations\");\n    a.collectionsWithInit.annotations = [a.addAnnotation];\n    a.callbacks.push(function (a) {\n      a.annotations = [];\n      a.options.annotations || (a.options.annotations = []);\n      a.plotBoxClip = this.renderer.clipRect(this.plotBox);\n      a.controlPointsGroup = a.renderer.g(\"control-points\").attr({\n        zIndex: 99\n      }).clip(a.plotBoxClip).add();\n      a.options.annotations.forEach(function (b, c) {\n        b = a.initAnnotation(b);\n        a.options.annotations[c] = b.options;\n      });\n      a.drawAnnotations();\n      q(a, \"redraw\", a.drawAnnotations);\n      q(a, \"destroy\", function () {\n        a.plotBoxClip.destroy();\n        a.controlPointsGroup.destroy();\n      });\n    });\n    k(x.prototype, \"onContainerMouseDown\", function (a) {\n      this.chart.hasDraggedAnnotation || a.apply(this, Array.prototype.slice.call(arguments, 1));\n    });\n    return h.Annotation = B;\n  });\n  p(a, \"mixins/navigation.js\", [], function () {\n    return {\n      initUpdate: function initUpdate(a) {\n        a.navigation || (a.navigation = {\n          updates: [],\n          update: function update(a, m) {\n            this.updates.forEach(function (d) {\n              d.update.call(d.context, a, m);\n            });\n          }\n        });\n      },\n      addUpdate: function addUpdate(a, d) {\n        d.navigation || this.initUpdate(d);\n        d.navigation.updates.push({\n          update: a,\n          context: d\n        });\n      }\n    };\n  });\n  p(a, \"annotations/navigationBindings.js\", [a[\"annotations/annotations.src.js\"], a[\"mixins/navigation.js\"], a[\"parts/Globals.js\"], a[\"parts/Utilities.js\"]], function (a, d, m, e) {\n    function q(a) {\n      var b = a.prototype.defaultOptions.events && a.prototype.defaultOptions.events.click;\n      y(!0, a.prototype.defaultOptions.events, {\n        click: function click(a) {\n          var d = this,\n              f = d.chart.navigationBindings,\n              g = f.activeAnnotation;\n          b && b.call(d, a);\n          g !== d ? (f.deselectAnnotation(), f.activeAnnotation = d, d.setControlPointsVisibility(!0), c(f, \"showPopup\", {\n            annotation: d,\n            formType: \"annotation-toolbar\",\n            options: f.annotationToFields(d),\n            onSubmit: function onSubmit(a) {\n              var b = {};\n              \"remove\" === a.actionType ? (f.activeAnnotation = !1, f.chart.removeAnnotation(d)) : (f.fieldsToOptions(a.fields, b), f.deselectAnnotation(), a = b.typeOptions, \"measure\" === d.options.type && (a.crosshairY.enabled = 0 !== a.crosshairY.strokeWidth, a.crosshairX.enabled = 0 !== a.crosshairX.strokeWidth), d.update(b));\n            }\n          })) : (f.deselectAnnotation(), c(f, \"closePopup\"));\n          a.activeAnnotation = !0;\n        }\n      });\n    }\n\n    var b = e.addEvent,\n        p = e.attr,\n        z = e.format,\n        c = e.fireEvent,\n        h = e.isArray,\n        r = e.isFunction,\n        x = e.isNumber,\n        k = e.isObject,\n        y = e.merge,\n        g = e.objectEach,\n        f = e.pick;\n    e = e.setOptions;\n\n    var n = m.doc,\n        u = m.win,\n        l = function () {\n      function a(a, b) {\n        this.selectedButton = this.boundClassNames = void 0;\n        this.chart = a;\n        this.options = b;\n        this.eventsToUnbind = [];\n        this.container = n.getElementsByClassName(this.options.bindingsClassName || \"\");\n      }\n\n      a.prototype.initEvents = function () {\n        var a = this,\n            c = a.chart,\n            d = a.container,\n            f = a.options;\n        a.boundClassNames = {};\n        g(f.bindings || {}, function (b) {\n          a.boundClassNames[b.className] = b;\n        });\n        [].forEach.call(d, function (c) {\n          a.eventsToUnbind.push(b(c, \"click\", function (b) {\n            var d = a.getButtonEvents(c, b);\n            d && a.bindingsButtonClick(d.button, d.events, b);\n          }));\n        });\n        g(f.events || {}, function (c, d) {\n          r(c) && a.eventsToUnbind.push(b(a, d, c));\n        });\n        a.eventsToUnbind.push(b(c.container, \"click\", function (b) {\n          !c.cancelClick && c.isInsidePlot(b.chartX - c.plotLeft, b.chartY - c.plotTop) && a.bindingsChartClick(this, b);\n        }));\n        a.eventsToUnbind.push(b(c.container, m.isTouchDevice ? \"touchmove\" : \"mousemove\", function (b) {\n          a.bindingsContainerMouseMove(this, b);\n        }));\n      };\n\n      a.prototype.initUpdate = function () {\n        var a = this;\n        d.addUpdate(function (b) {\n          a.update(b);\n        }, this.chart);\n      };\n\n      a.prototype.bindingsButtonClick = function (a, b, d) {\n        var f = this.chart;\n        this.selectedButtonElement && (c(this, \"deselectButton\", {\n          button: this.selectedButtonElement\n        }), this.nextEvent && (this.currentUserDetails && \"annotations\" === this.currentUserDetails.coll && f.removeAnnotation(this.currentUserDetails), this.mouseMoveEvent = this.nextEvent = !1));\n        this.selectedButton = b;\n        this.selectedButtonElement = a;\n        c(this, \"selectButton\", {\n          button: a\n        });\n        b.init && b.init.call(this, a, d);\n        (b.start || b.steps) && f.renderer.boxWrapper.addClass(\"highcharts-draw-mode\");\n      };\n\n      a.prototype.bindingsChartClick = function (a, b) {\n        a = this.chart;\n        var d = this.selectedButton;\n        a = a.renderer.boxWrapper;\n        var f;\n\n        if (f = this.activeAnnotation && !b.activeAnnotation && b.target.parentNode) {\n          a: {\n            f = b.target;\n            var g = u.Element.prototype,\n                e = g.matches || g.msMatchesSelector || g.webkitMatchesSelector,\n                t = null;\n            if (g.closest) t = g.closest.call(f, \".highcharts-popup\");else {\n              do {\n                if (e.call(f, \".highcharts-popup\")) break a;\n                f = f.parentElement || f.parentNode;\n              } while (null !== f && 1 === f.nodeType);\n            }\n            f = t;\n          }\n\n          f = !f;\n        }\n\n        f && (c(this, \"closePopup\"), this.deselectAnnotation());\n        d && d.start && (this.nextEvent ? (this.nextEvent(b, this.currentUserDetails), this.steps && (this.stepIndex++, d.steps[this.stepIndex] ? this.mouseMoveEvent = this.nextEvent = d.steps[this.stepIndex] : (c(this, \"deselectButton\", {\n          button: this.selectedButtonElement\n        }), a.removeClass(\"highcharts-draw-mode\"), d.end && d.end.call(this, b, this.currentUserDetails), this.mouseMoveEvent = this.nextEvent = !1, this.selectedButton = null))) : (this.currentUserDetails = d.start.call(this, b), d.steps ? (this.stepIndex = 0, this.steps = !0, this.mouseMoveEvent = this.nextEvent = d.steps[this.stepIndex]) : (c(this, \"deselectButton\", {\n          button: this.selectedButtonElement\n        }), a.removeClass(\"highcharts-draw-mode\"), this.steps = !1, this.selectedButton = null, d.end && d.end.call(this, b, this.currentUserDetails))));\n      };\n\n      a.prototype.bindingsContainerMouseMove = function (a, b) {\n        this.mouseMoveEvent && this.mouseMoveEvent(b, this.currentUserDetails);\n      };\n\n      a.prototype.fieldsToOptions = function (a, b) {\n        g(a, function (a, c) {\n          var d = parseFloat(a),\n              g = c.split(\".\"),\n              e = b,\n              t = g.length - 1;\n          !x(d) || a.match(/px/g) || c.match(/format/g) || (a = d);\n          \"\" !== a && \"undefined\" !== a && g.forEach(function (b, c) {\n            var d = f(g[c + 1], \"\");\n            t === c ? e[b] = a : (e[b] || (e[b] = d.match(/\\d/g) ? [] : {}), e = e[b]);\n          });\n        });\n        return b;\n      };\n\n      a.prototype.deselectAnnotation = function () {\n        this.activeAnnotation && (this.activeAnnotation.setControlPointsVisibility(!1), this.activeAnnotation = !1);\n      };\n\n      a.prototype.annotationToFields = function (b) {\n        function c(a, d, f, e) {\n          if (f && -1 === w.indexOf(d) && (0 <= (f.indexOf && f.indexOf(d)) || f[d] || !0 === f)) if (h(a)) e[d] = [], a.forEach(function (a, b) {\n            k(a) ? (e[d][b] = {}, g(a, function (a, f) {\n              c(a, f, t[d], e[d][b]);\n            })) : c(a, 0, t[d], e[d]);\n          });else if (k(a)) {\n            var n = {};\n            h(e) ? (e.push(n), n[d] = {}, n = n[d]) : e[d] = n;\n            g(a, function (a, b) {\n              c(a, b, 0 === d ? f : t[d], n);\n            });\n          } else \"format\" === d ? e[d] = [z(a, b.labels[0].points[0]).toString(), \"text\"] : h(e) ? e.push([a, l(a)]) : e[d] = [a, l(a)];\n        }\n\n        var d = b.options,\n            e = a.annotationsEditable,\n            t = e.nestedOptions,\n            l = this.utils.getFieldType,\n            n = f(d.type, d.shapes && d.shapes[0] && d.shapes[0].type, d.labels && d.labels[0] && d.labels[0].itemType, \"label\"),\n            w = a.annotationsNonEditable[d.langKey] || [],\n            u = {\n          langKey: d.langKey,\n          type: n\n        };\n        g(d, function (a, b) {\n          \"typeOptions\" === b ? (u[b] = {}, g(d[b], function (a, d) {\n            c(a, d, t, u[b], !0);\n          })) : c(a, b, e[n], u);\n        });\n        return u;\n      };\n\n      a.prototype.getClickedClassNames = function (a, b) {\n        var c = b.target;\n        b = [];\n\n        for (var d; c && ((d = p(c, \"class\")) && (b = b.concat(d.split(\" \").map(function (a) {\n          return [a, c];\n        }))), c = c.parentNode, c !== a);) {\n          ;\n        }\n\n        return b;\n      };\n\n      a.prototype.getButtonEvents = function (a, b) {\n        var c = this,\n            d;\n        this.getClickedClassNames(a, b).forEach(function (a) {\n          c.boundClassNames[a[0]] && !d && (d = {\n            events: c.boundClassNames[a[0]],\n            button: a[1]\n          });\n        });\n        return d;\n      };\n\n      a.prototype.update = function (a) {\n        this.options = y(!0, this.options, a);\n        this.removeEvents();\n        this.initEvents();\n      };\n\n      a.prototype.removeEvents = function () {\n        this.eventsToUnbind.forEach(function (a) {\n          a();\n        });\n      };\n\n      a.prototype.destroy = function () {\n        this.removeEvents();\n      };\n\n      a.annotationsEditable = {\n        nestedOptions: {\n          labelOptions: [\"style\", \"format\", \"backgroundColor\"],\n          labels: [\"style\"],\n          label: [\"style\"],\n          style: [\"fontSize\", \"color\"],\n          background: [\"fill\", \"strokeWidth\", \"stroke\"],\n          innerBackground: [\"fill\", \"strokeWidth\", \"stroke\"],\n          outerBackground: [\"fill\", \"strokeWidth\", \"stroke\"],\n          shapeOptions: [\"fill\", \"strokeWidth\", \"stroke\"],\n          shapes: [\"fill\", \"strokeWidth\", \"stroke\"],\n          line: [\"strokeWidth\", \"stroke\"],\n          backgroundColors: [!0],\n          connector: [\"fill\", \"strokeWidth\", \"stroke\"],\n          crosshairX: [\"strokeWidth\", \"stroke\"],\n          crosshairY: [\"strokeWidth\", \"stroke\"]\n        },\n        circle: [\"shapes\"],\n        verticalLine: [],\n        label: [\"labelOptions\"],\n        measure: [\"background\", \"crosshairY\", \"crosshairX\"],\n        fibonacci: [],\n        tunnel: [\"background\", \"line\", \"height\"],\n        pitchfork: [\"innerBackground\", \"outerBackground\"],\n        rect: [\"shapes\"],\n        crookedLine: [],\n        basicAnnotation: []\n      };\n      a.annotationsNonEditable = {\n        rectangle: [\"crosshairX\", \"crosshairY\", \"label\"]\n      };\n      return a;\n    }();\n\n    l.prototype.utils = {\n      updateRectSize: function updateRectSize(a, b) {\n        var c = b.chart,\n            d = b.options.typeOptions,\n            f = c.pointer.getCoordinates(a);\n        a = f.xAxis[0].value - d.point.x;\n        d = d.point.y - f.yAxis[0].value;\n        b.update({\n          typeOptions: {\n            background: {\n              width: c.inverted ? d : a,\n              height: c.inverted ? a : d\n            }\n          }\n        });\n      },\n      getFieldType: function getFieldType(a) {\n        return {\n          string: \"text\",\n          number: \"number\",\n          \"boolean\": \"checkbox\"\n        }[typeof a];\n      }\n    };\n\n    m.Chart.prototype.initNavigationBindings = function () {\n      var a = this.options;\n      a && a.navigation && a.navigation.bindings && (this.navigationBindings = new l(this, a.navigation), this.navigationBindings.initEvents(), this.navigationBindings.initUpdate());\n    };\n\n    b(m.Chart, \"load\", function () {\n      this.initNavigationBindings();\n    });\n    b(m.Chart, \"destroy\", function () {\n      this.navigationBindings && this.navigationBindings.destroy();\n    });\n    b(l, \"deselectButton\", function () {\n      this.selectedButtonElement = null;\n    });\n    b(a, \"remove\", function () {\n      this.chart.navigationBindings && this.chart.navigationBindings.deselectAnnotation();\n    });\n    m.Annotation && (q(a), g(a.types, function (a) {\n      q(a);\n    }));\n    e({\n      lang: {\n        navigation: {\n          popup: {\n            simpleShapes: \"Simple shapes\",\n            lines: \"Lines\",\n            circle: \"Circle\",\n            rectangle: \"Rectangle\",\n            label: \"Label\",\n            shapeOptions: \"Shape options\",\n            typeOptions: \"Details\",\n            fill: \"Fill\",\n            format: \"Text\",\n            strokeWidth: \"Line width\",\n            stroke: \"Line color\",\n            title: \"Title\",\n            name: \"Name\",\n            labelOptions: \"Label options\",\n            labels: \"Labels\",\n            backgroundColor: \"Background color\",\n            backgroundColors: \"Background colors\",\n            borderColor: \"Border color\",\n            borderRadius: \"Border radius\",\n            borderWidth: \"Border width\",\n            style: \"Style\",\n            padding: \"Padding\",\n            fontSize: \"Font size\",\n            color: \"Color\",\n            height: \"Height\",\n            shapes: \"Shape options\"\n          }\n        }\n      },\n      navigation: {\n        bindingsClassName: \"highcharts-bindings-container\",\n        bindings: {\n          circleAnnotation: {\n            className: \"highcharts-circle-annotation\",\n            start: function start(a) {\n              a = this.chart.pointer.getCoordinates(a);\n              var b = this.chart.options.navigation;\n              return this.chart.addAnnotation(y({\n                langKey: \"circle\",\n                type: \"basicAnnotation\",\n                shapes: [{\n                  type: \"circle\",\n                  point: {\n                    xAxis: 0,\n                    yAxis: 0,\n                    x: a.xAxis[0].value,\n                    y: a.yAxis[0].value\n                  },\n                  r: 5\n                }]\n              }, b.annotationsOptions, b.bindings.circleAnnotation.annotationsOptions));\n            },\n            steps: [function (a, b) {\n              var c = b.options.shapes[0].point,\n                  d = this.chart.xAxis[0].toPixels(c.x);\n              c = this.chart.yAxis[0].toPixels(c.y);\n              var f = this.chart.inverted;\n              b.update({\n                shapes: [{\n                  r: Math.max(Math.sqrt(Math.pow(f ? c - a.chartX : d - a.chartX, 2) + Math.pow(f ? d - a.chartY : c - a.chartY, 2)), 5)\n                }]\n              });\n            }]\n          },\n          rectangleAnnotation: {\n            className: \"highcharts-rectangle-annotation\",\n            start: function start(a) {\n              var b = this.chart.pointer.getCoordinates(a);\n              a = this.chart.options.navigation;\n              var c = b.xAxis[0].value;\n              b = b.yAxis[0].value;\n              return this.chart.addAnnotation(y({\n                langKey: \"rectangle\",\n                type: \"basicAnnotation\",\n                shapes: [{\n                  type: \"path\",\n                  points: [{\n                    xAxis: 0,\n                    yAxis: 0,\n                    x: c,\n                    y: b\n                  }, {\n                    xAxis: 0,\n                    yAxis: 0,\n                    x: c,\n                    y: b\n                  }, {\n                    xAxis: 0,\n                    yAxis: 0,\n                    x: c,\n                    y: b\n                  }, {\n                    xAxis: 0,\n                    yAxis: 0,\n                    x: c,\n                    y: b\n                  }]\n                }]\n              }, a.annotationsOptions, a.bindings.rectangleAnnotation.annotationsOptions));\n            },\n            steps: [function (a, b) {\n              var c = b.options.shapes[0].points,\n                  d = this.chart.pointer.getCoordinates(a);\n              a = d.xAxis[0].value;\n              d = d.yAxis[0].value;\n              c[1].x = a;\n              c[2].x = a;\n              c[2].y = d;\n              c[3].y = d;\n              b.update({\n                shapes: [{\n                  points: c\n                }]\n              });\n            }]\n          },\n          labelAnnotation: {\n            className: \"highcharts-label-annotation\",\n            start: function start(a) {\n              a = this.chart.pointer.getCoordinates(a);\n              var b = this.chart.options.navigation;\n              return this.chart.addAnnotation(y({\n                langKey: \"label\",\n                type: \"basicAnnotation\",\n                labelOptions: {\n                  format: \"{y:.2f}\"\n                },\n                labels: [{\n                  point: {\n                    xAxis: 0,\n                    yAxis: 0,\n                    x: a.xAxis[0].value,\n                    y: a.yAxis[0].value\n                  },\n                  overflow: \"none\",\n                  crop: !0\n                }]\n              }, b.annotationsOptions, b.bindings.labelAnnotation.annotationsOptions));\n            }\n          }\n        },\n        events: {},\n        annotationsOptions: {}\n      }\n    });\n    return l;\n  });\n  p(a, \"annotations/popup.js\", [a[\"parts/Globals.js\"], a[\"annotations/navigationBindings.js\"], a[\"parts/Pointer.js\"], a[\"parts/Utilities.js\"]], function (a, d, m, e) {\n    var p = e.addEvent,\n        b = e.createElement,\n        q = e.defined,\n        z = e.getOptions,\n        c = e.isArray,\n        h = e.isObject,\n        r = e.isString,\n        x = e.objectEach,\n        k = e.pick;\n    e = e.wrap;\n    var y = /\\d/g;\n    e(m.prototype, \"onContainerMouseDown\", function (a, b) {\n      var c = b.target && b.target.className;\n      r(c) && 0 <= c.indexOf(\"highcharts-popup-field\") || a.apply(this, Array.prototype.slice.call(arguments, 1));\n    });\n\n    a.Popup = function (a, b) {\n      this.init(a, b);\n    };\n\n    a.Popup.prototype = {\n      init: function init(a, c) {\n        this.container = b(\"div\", {\n          className: \"highcharts-popup\"\n        }, null, a);\n        this.lang = this.getLangpack();\n        this.iconsURL = c;\n        this.addCloseBtn();\n      },\n      addCloseBtn: function addCloseBtn() {\n        var a = this;\n        var c = b(\"div\", {\n          className: \"highcharts-popup-close\"\n        }, null, this.container);\n        c.style[\"background-image\"] = \"url(\" + this.iconsURL + \"close.svg)\";\n        [\"click\", \"touchstart\"].forEach(function (b) {\n          p(c, b, function () {\n            a.closePopup();\n          });\n        });\n      },\n      addColsContainer: function addColsContainer(a) {\n        var c = b(\"div\", {\n          className: \"highcharts-popup-lhs-col\"\n        }, null, a);\n        a = b(\"div\", {\n          className: \"highcharts-popup-rhs-col\"\n        }, null, a);\n        b(\"div\", {\n          className: \"highcharts-popup-rhs-col-wrapper\"\n        }, null, a);\n        return {\n          lhsCol: c,\n          rhsCol: a\n        };\n      },\n      addInput: function addInput(a, c, d, e) {\n        var f = a.split(\".\");\n        f = f[f.length - 1];\n        var g = this.lang;\n        c = \"highcharts-\" + c + \"-\" + f;\n        c.match(y) || b(\"label\", {\n          innerHTML: g[f] || f,\n          htmlFor: c\n        }, null, d);\n        b(\"input\", {\n          name: c,\n          value: e[0],\n          type: e[1],\n          className: \"highcharts-popup-field\"\n        }, null, d).setAttribute(\"highcharts-data-name\", a);\n      },\n      addButton: function addButton(a, c, d, e, l) {\n        var f = this,\n            g = this.closePopup,\n            n = this.getFields;\n        var h = b(\"button\", {\n          innerHTML: c\n        }, null, a);\n        [\"click\", \"touchstart\"].forEach(function (a) {\n          p(h, a, function () {\n            g.call(f);\n            return e(n(l, d));\n          });\n        });\n        return h;\n      },\n      getFields: function getFields(a, b) {\n        var c = a.querySelectorAll(\"input\"),\n            d = a.querySelectorAll(\"#highcharts-select-series > option:checked\")[0];\n        a = a.querySelectorAll(\"#highcharts-select-volume > option:checked\")[0];\n        var f, e;\n        var g = {\n          actionType: b,\n          linkedTo: d && d.getAttribute(\"value\"),\n          fields: {}\n        };\n        [].forEach.call(c, function (a) {\n          e = a.getAttribute(\"highcharts-data-name\");\n          (f = a.getAttribute(\"highcharts-data-series-id\")) ? g.seriesId = a.value : e ? g.fields[e] = a.value : g.type = a.value;\n        });\n        a && (g.fields[\"params.volumeSeriesID\"] = a.getAttribute(\"value\"));\n        return g;\n      },\n      showPopup: function showPopup() {\n        var a = this.container,\n            b = a.querySelectorAll(\".highcharts-popup-close\")[0];\n        a.innerHTML = \"\";\n        0 <= a.className.indexOf(\"highcharts-annotation-toolbar\") && (a.classList.remove(\"highcharts-annotation-toolbar\"), a.removeAttribute(\"style\"));\n        a.appendChild(b);\n        a.style.display = \"block\";\n      },\n      closePopup: function closePopup() {\n        this.popup.container.style.display = \"none\";\n      },\n      showForm: function showForm(a, b, c, d) {\n        this.popup = b.navigationBindings.popup;\n        this.showPopup();\n        \"indicators\" === a && this.indicators.addForm.call(this, b, c, d);\n        \"annotation-toolbar\" === a && this.annotations.addToolbar.call(this, b, c, d);\n        \"annotation-edit\" === a && this.annotations.addForm.call(this, b, c, d);\n        \"flag\" === a && this.annotations.addForm.call(this, b, c, d, !0);\n      },\n      getLangpack: function getLangpack() {\n        return z().lang.navigation.popup;\n      },\n      annotations: {\n        addToolbar: function addToolbar(a, c, d) {\n          var f = this,\n              e = this.lang,\n              g = this.popup.container,\n              h = this.showForm;\n          -1 === g.className.indexOf(\"highcharts-annotation-toolbar\") && (g.className += \" highcharts-annotation-toolbar\");\n          g.style.top = a.plotTop + 10 + \"px\";\n          b(\"span\", {\n            innerHTML: k(e[c.langKey] || c.langKey, c.shapes && c.shapes[0].type)\n          }, null, g);\n          var n = this.addButton(g, e.removeButton || \"remove\", \"remove\", d, g);\n          n.className += \" highcharts-annotation-remove-button\";\n          n.style[\"background-image\"] = \"url(\" + this.iconsURL + \"destroy.svg)\";\n          n = this.addButton(g, e.editButton || \"edit\", \"edit\", function () {\n            h.call(f, \"annotation-edit\", a, c, d);\n          }, g);\n          n.className += \" highcharts-annotation-edit-button\";\n          n.style[\"background-image\"] = \"url(\" + this.iconsURL + \"edit.svg)\";\n        },\n        addForm: function addForm(a, c, d, e) {\n          var f = this.popup.container,\n              g = this.lang;\n          b(\"h2\", {\n            innerHTML: g[c.langKey] || c.langKey,\n            className: \"highcharts-popup-main-title\"\n          }, null, f);\n          var n = b(\"div\", {\n            className: \"highcharts-popup-lhs-col highcharts-popup-lhs-full\"\n          }, null, f);\n          var h = b(\"div\", {\n            className: \"highcharts-popup-bottom-row\"\n          }, null, f);\n          this.annotations.addFormFields.call(this, n, a, \"\", c, [], !0);\n          this.addButton(h, e ? g.addButton || \"add\" : g.saveButton || \"save\", e ? \"add\" : \"save\", d, f);\n        },\n        addFormFields: function addFormFields(a, d, e, k, l, t) {\n          var f = this,\n              g = this.annotations.addFormFields,\n              n = this.addInput,\n              u = this.lang,\n              m,\n              p;\n          x(k, function (b, n) {\n            m = \"\" !== e ? e + \".\" + n : n;\n            h(b) && (!c(b) || c(b) && h(b[0]) ? (p = u[n] || n, p.match(y) || l.push([!0, p, a]), g.call(f, a, d, m, b, l, !1)) : l.push([f, m, \"annotation\", a, b]));\n          });\n          t && (l = l.sort(function (a) {\n            return a[1].match(/format/g) ? -1 : 1;\n          }), l.forEach(function (a) {\n            !0 === a[0] ? b(\"span\", {\n              className: \"highcharts-annotation-title\",\n              innerHTML: a[1]\n            }, null, a[2]) : n.apply(a[0], a.splice(1));\n          }));\n        }\n      },\n      indicators: {\n        addForm: function addForm(a, b, c) {\n          var d = this.indicators,\n              f = this.lang;\n          this.tabs.init.call(this, a);\n          b = this.popup.container.querySelectorAll(\".highcharts-tab-item-content\");\n          this.addColsContainer(b[0]);\n          d.addIndicatorList.call(this, a, b[0], \"add\");\n          var e = b[0].querySelectorAll(\".highcharts-popup-rhs-col\")[0];\n          this.addButton(e, f.addButton || \"add\", \"add\", c, e);\n          this.addColsContainer(b[1]);\n          d.addIndicatorList.call(this, a, b[1], \"edit\");\n          e = b[1].querySelectorAll(\".highcharts-popup-rhs-col\")[0];\n          this.addButton(e, f.saveButton || \"save\", \"edit\", c, e);\n          this.addButton(e, f.removeButton || \"remove\", \"remove\", c, e);\n        },\n        addIndicatorList: function addIndicatorList(a, c, d) {\n          var e = this,\n              f = c.querySelectorAll(\".highcharts-popup-lhs-col\")[0];\n          c = c.querySelectorAll(\".highcharts-popup-rhs-col\")[0];\n          var g = \"edit\" === d,\n              h = g ? a.series : a.options.plotOptions,\n              n = this.indicators.addFormFields,\n              k;\n          var m = b(\"ul\", {\n            className: \"highcharts-indicator-list\"\n          }, null, f);\n          var q = c.querySelectorAll(\".highcharts-popup-rhs-col-wrapper\")[0];\n          x(h, function (c, d) {\n            var f = c.options;\n\n            if (c.params || f && f.params) {\n              var l = e.indicators.getNameType(c, d),\n                  u = l.type;\n              k = b(\"li\", {\n                className: \"highcharts-indicator-list\",\n                innerHTML: l.name\n              }, null, m);\n              [\"click\", \"touchstart\"].forEach(function (d) {\n                p(k, d, function () {\n                  n.call(e, a, g ? c : h[u], l.type, q);\n                  g && c.options && b(\"input\", {\n                    type: \"hidden\",\n                    name: \"highcharts-id-\" + u,\n                    value: c.options.id\n                  }, null, q).setAttribute(\"highcharts-data-series-id\", c.options.id);\n                });\n              });\n            }\n          });\n          0 < m.childNodes.length && m.childNodes[0].click();\n        },\n        getNameType: function getNameType(b, c) {\n          var d = b.options,\n              e = a.seriesTypes;\n          e = e[c] && e[c].prototype.nameBase || c.toUpperCase();\n          d && d.type && (c = b.options.type, e = b.name);\n          return {\n            name: e,\n            type: c\n          };\n        },\n        listAllSeries: function listAllSeries(a, c, d, e, h) {\n          a = \"highcharts-\" + c + \"-type-\" + a;\n          var f;\n          b(\"label\", {\n            innerHTML: this.lang[c] || c,\n            htmlFor: a\n          }, null, e);\n          var g = b(\"select\", {\n            name: a,\n            className: \"highcharts-popup-field\"\n          }, null, e);\n          g.setAttribute(\"id\", \"highcharts-select-\" + c);\n          d.series.forEach(function (a) {\n            f = a.options;\n            !f.params && f.id && \"highcharts-navigator-series\" !== f.id && b(\"option\", {\n              innerHTML: f.name || f.id,\n              value: f.id\n            }, null, g);\n          });\n          q(h) && (g.value = h);\n        },\n        addFormFields: function addFormFields(a, c, d, e) {\n          var f = c.params || c.options.params,\n              g = this.indicators.getNameType;\n          e.innerHTML = \"\";\n          b(\"h3\", {\n            className: \"highcharts-indicator-title\",\n            innerHTML: g(c, d).name\n          }, null, e);\n          b(\"input\", {\n            type: \"hidden\",\n            name: \"highcharts-type-\" + d,\n            value: d\n          }, null, e);\n          this.indicators.listAllSeries.call(this, d, \"series\", a, e, c.linkedParent && f.volumeSeriesID);\n          f.volumeSeriesID && this.indicators.listAllSeries.call(this, d, \"volume\", a, e, c.linkedParent && c.linkedParent.options.id);\n          this.indicators.addParamInputs.call(this, a, \"params\", f, d, e);\n        },\n        addParamInputs: function addParamInputs(a, b, c, d, e) {\n          var f = this,\n              g = this.indicators.addParamInputs,\n              k = this.addInput,\n              n;\n          x(c, function (c, l) {\n            n = b + \".\" + l;\n            h(c) ? g.call(f, a, n, c, d, e) : \"params.volumeSeriesID\" !== n && k.call(f, n, d, e, [c, \"text\"]);\n          });\n        },\n        getAmount: function getAmount() {\n          var a = 0;\n          this.series.forEach(function (b) {\n            var c = b.options;\n            (b.params || c && c.params) && a++;\n          });\n          return a;\n        }\n      },\n      tabs: {\n        init: function init(a) {\n          var b = this.tabs;\n          a = this.indicators.getAmount.call(a);\n          var c = b.addMenuItem.call(this, \"add\");\n          b.addMenuItem.call(this, \"edit\", a);\n          b.addContentItem.call(this, \"add\");\n          b.addContentItem.call(this, \"edit\");\n          b.switchTabs.call(this, a);\n          b.selectTab.call(this, c, 0);\n        },\n        addMenuItem: function addMenuItem(a, c) {\n          var d = this.popup.container,\n              e = \"highcharts-tab-item\",\n              f = this.lang;\n          0 === c && (e += \" highcharts-tab-disabled\");\n          c = b(\"span\", {\n            innerHTML: f[a + \"Button\"] || a,\n            className: e\n          }, null, d);\n          c.setAttribute(\"highcharts-data-tab-type\", a);\n          return c;\n        },\n        addContentItem: function addContentItem() {\n          return b(\"div\", {\n            className: \"highcharts-tab-item-content\"\n          }, null, this.popup.container);\n        },\n        switchTabs: function switchTabs(a) {\n          var b = this,\n              c;\n          this.popup.container.querySelectorAll(\".highcharts-tab-item\").forEach(function (d, e) {\n            c = d.getAttribute(\"highcharts-data-tab-type\");\n            \"edit\" === c && 0 === a || [\"click\", \"touchstart\"].forEach(function (a) {\n              p(d, a, function () {\n                b.tabs.deselectAll.call(b);\n                b.tabs.selectTab.call(b, this, e);\n              });\n            });\n          });\n        },\n        selectTab: function selectTab(a, b) {\n          var c = this.popup.container.querySelectorAll(\".highcharts-tab-item-content\");\n          a.className += \" highcharts-tab-item-active\";\n          c[b].className += \" highcharts-tab-item-show\";\n        },\n        deselectAll: function deselectAll() {\n          var a = this.popup.container,\n              b = a.querySelectorAll(\".highcharts-tab-item\");\n          a = a.querySelectorAll(\".highcharts-tab-item-content\");\n          var c;\n\n          for (c = 0; c < b.length; c++) {\n            b[c].classList.remove(\"highcharts-tab-item-active\"), a[c].classList.remove(\"highcharts-tab-item-show\");\n          }\n        }\n      }\n    };\n    p(d, \"showPopup\", function (b) {\n      this.popup || (this.popup = new a.Popup(this.chart.container, this.chart.options.navigation.iconsURL || this.chart.options.stockTools && this.chart.options.stockTools.gui.iconsURL || \"https://code.highcharts.com/8.1.2/gfx/stock-icons/\"));\n      this.popup.showForm(b.formType, this.chart, b.options, b.onSubmit);\n    });\n    p(d, \"closePopup\", function () {\n      this.popup && this.popup.closePopup();\n    });\n  });\n  p(a, \"masters/modules/annotations.src.js\", [], function () {});\n});","map":null,"metadata":{},"sourceType":"script"}