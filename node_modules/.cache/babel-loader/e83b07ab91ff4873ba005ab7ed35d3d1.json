{"ast":null,"code":"/*global describe*/\n\n/*global require*/\n\n/*global module*/\n\n/*global it*/\n\n/*global console*/\n\n/*global process*/\n//-------------------------------------------------------------------\n//-------------------------------------------------------------------\nfunction Variable(id, cost, index, priority) {\n  this.id = id;\n  this.cost = cost;\n  this.index = index;\n  this.value = 0;\n  this.priority = priority;\n}\n\nfunction IntegerVariable(id, cost, index, priority) {\n  Variable.call(this, id, cost, index, priority);\n}\n\nIntegerVariable.prototype.isInteger = true;\n\nfunction SlackVariable(id, index) {\n  Variable.call(this, id, 0, index, 0);\n}\n\nSlackVariable.prototype.isSlack = true; //-------------------------------------------------------------------\n//-------------------------------------------------------------------\n\nfunction Term(variable, coefficient) {\n  this.variable = variable;\n  this.coefficient = coefficient;\n}\n\nfunction createRelaxationVariable(model, weight, priority) {\n  if (priority === 0 || priority === \"required\") {\n    return null;\n  }\n\n  weight = weight || 1;\n  priority = priority || 1;\n\n  if (model.isMinimization === false) {\n    weight = -weight;\n  }\n\n  return model.addVariable(weight, \"r\" + model.relaxationIndex++, false, false, priority);\n} //-------------------------------------------------------------------\n//-------------------------------------------------------------------\n\n\nfunction Constraint(rhs, isUpperBound, index, model) {\n  this.slack = new SlackVariable(\"s\" + index, index);\n  this.index = index;\n  this.model = model;\n  this.rhs = rhs;\n  this.isUpperBound = isUpperBound;\n  this.terms = [];\n  this.termsByVarIndex = {}; // Error variable in case the constraint is relaxed\n\n  this.relaxation = null;\n}\n\nConstraint.prototype.addTerm = function (coefficient, variable) {\n  var varIndex = variable.index;\n  var term = this.termsByVarIndex[varIndex];\n\n  if (term === undefined) {\n    // No term for given variable\n    term = new Term(variable, coefficient);\n    this.termsByVarIndex[varIndex] = term;\n    this.terms.push(term);\n\n    if (this.isUpperBound === true) {\n      coefficient = -coefficient;\n    }\n\n    this.model.updateConstraintCoefficient(this, variable, coefficient);\n  } else {\n    // Term for given variable already exists\n    // updating its coefficient\n    var newCoefficient = term.coefficient + coefficient;\n    this.setVariableCoefficient(newCoefficient, variable);\n  }\n\n  return this;\n};\n\nConstraint.prototype.removeTerm = function (term) {\n  // TODO\n  return this;\n};\n\nConstraint.prototype.setRightHandSide = function (newRhs) {\n  if (newRhs !== this.rhs) {\n    var difference = newRhs - this.rhs;\n\n    if (this.isUpperBound === true) {\n      difference = -difference;\n    }\n\n    this.rhs = newRhs;\n    this.model.updateRightHandSide(this, difference);\n  }\n\n  return this;\n};\n\nConstraint.prototype.setVariableCoefficient = function (newCoefficient, variable) {\n  var varIndex = variable.index;\n\n  if (varIndex === -1) {\n    console.warn(\"[Constraint.setVariableCoefficient] Trying to change coefficient of inexistant variable.\");\n    return;\n  }\n\n  var term = this.termsByVarIndex[varIndex];\n\n  if (term === undefined) {\n    // No term for given variable\n    this.addTerm(newCoefficient, variable);\n  } else {\n    // Term for given variable already exists\n    // updating its coefficient if changed\n    if (newCoefficient !== term.coefficient) {\n      var difference = newCoefficient - term.coefficient;\n\n      if (this.isUpperBound === true) {\n        difference = -difference;\n      }\n\n      term.coefficient = newCoefficient;\n      this.model.updateConstraintCoefficient(this, variable, difference);\n    }\n  }\n\n  return this;\n};\n\nConstraint.prototype.relax = function (weight, priority) {\n  this.relaxation = createRelaxationVariable(this.model, weight, priority);\n\n  this._relax(this.relaxation);\n};\n\nConstraint.prototype._relax = function (relaxationVariable) {\n  if (relaxationVariable === null) {\n    // Relaxation variable not created, priority was probably \"required\"\n    return;\n  }\n\n  if (this.isUpperBound) {\n    this.setVariableCoefficient(-1, relaxationVariable);\n  } else {\n    this.setVariableCoefficient(1, relaxationVariable);\n  }\n}; //-------------------------------------------------------------------\n//-------------------------------------------------------------------\n\n\nfunction Equality(constraintUpper, constraintLower) {\n  this.upperBound = constraintUpper;\n  this.lowerBound = constraintLower;\n  this.model = constraintUpper.model;\n  this.rhs = constraintUpper.rhs;\n  this.relaxation = null;\n}\n\nEquality.prototype.isEquality = true;\n\nEquality.prototype.addTerm = function (coefficient, variable) {\n  this.upperBound.addTerm(coefficient, variable);\n  this.lowerBound.addTerm(coefficient, variable);\n  return this;\n};\n\nEquality.prototype.removeTerm = function (term) {\n  this.upperBound.removeTerm(term);\n  this.lowerBound.removeTerm(term);\n  return this;\n};\n\nEquality.prototype.setRightHandSide = function (rhs) {\n  this.upperBound.setRightHandSide(rhs);\n  this.lowerBound.setRightHandSide(rhs);\n  this.rhs = rhs;\n};\n\nEquality.prototype.relax = function (weight, priority) {\n  this.relaxation = createRelaxationVariable(this.model, weight, priority);\n  this.upperBound.relaxation = this.relaxation;\n\n  this.upperBound._relax(this.relaxation);\n\n  this.lowerBound.relaxation = this.relaxation;\n\n  this.lowerBound._relax(this.relaxation);\n};\n\nmodule.exports = {\n  Constraint: Constraint,\n  Variable: Variable,\n  IntegerVariable: IntegerVariable,\n  SlackVariable: SlackVariable,\n  Equality: Equality,\n  Term: Term\n};","map":null,"metadata":{},"sourceType":"script"}