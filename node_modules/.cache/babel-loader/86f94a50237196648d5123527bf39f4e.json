{"ast":null,"code":"/*global require*/\n\n/*global console*/\nvar Tableau = require(\"./Tableau.js\"); //-------------------------------------------------------------------\n// Description: Display a tableau matrix\n//              and additional tableau information\n//\n//-------------------------------------------------------------------\n\n\nTableau.prototype.log = function (message, force) {\n  if (false && !force) {\n    return;\n  }\n\n  console.log(\"****\", message, \"****\");\n  console.log(\"Nb Variables\", this.width - 1);\n  console.log(\"Nb Constraints\", this.height - 1); // console.log(\"Variable Ids\", this.variablesPerIndex);\n\n  console.log(\"Basic Indexes\", this.varIndexByRow);\n  console.log(\"Non Basic Indexes\", this.varIndexByCol);\n  console.log(\"Rows\", this.rowByVarIndex);\n  console.log(\"Cols\", this.colByVarIndex);\n  var digitPrecision = 5; // Variable declaration\n\n  var varNameRowString = \"\",\n      spacePerColumn = [\" \"],\n      j,\n      c,\n      s,\n      r,\n      variable,\n      varIndex,\n      varName,\n      varNameLength,\n      nSpaces,\n      valueSpace,\n      nameSpace;\n  var row, rowString;\n\n  for (c = 1; c < this.width; c += 1) {\n    varIndex = this.varIndexByCol[c];\n    variable = this.variablesPerIndex[varIndex];\n\n    if (variable === undefined) {\n      varName = \"c\" + varIndex;\n    } else {\n      varName = variable.id;\n    }\n\n    varNameLength = varName.length;\n    nSpaces = Math.abs(varNameLength - 5);\n    valueSpace = \" \";\n    nameSpace = \"\\t\"; ///////////\n\n    /*valueSpace = \" \";\r\n    nameSpace = \" \";\r\n      for (s = 0; s < nSpaces; s += 1) {\r\n        if (varNameLength > 5) {\r\n            valueSpace += \" \";\r\n        } else {\r\n            nameSpace += \" \";\r\n        }\r\n    }*/\n    ///////////\n\n    if (varNameLength > 5) {\n      valueSpace += \" \";\n    } else {\n      nameSpace += \"\\t\";\n    }\n\n    spacePerColumn[c] = valueSpace;\n    varNameRowString += nameSpace + varName;\n  }\n\n  console.log(varNameRowString);\n  var signSpace; // Displaying reduced costs\n\n  var firstRow = this.matrix[this.costRowIndex];\n  var firstRowString = \"\\t\"; ///////////\n\n  /*for (j = 1; j < this.width; j += 1) {\r\n      signSpace = firstRow[j] < 0 ? \"\" : \" \";\r\n      firstRowString += signSpace;\r\n      firstRowString += spacePerColumn[j];\r\n      firstRowString += firstRow[j].toFixed(2);\r\n  }\r\n  signSpace = firstRow[0] < 0 ? \"\" : \" \";\r\n  firstRowString += signSpace + spacePerColumn[0] +\r\n      firstRow[0].toFixed(2);\r\n  console.log(firstRowString + \" Z\");*/\n  ///////////\n\n  for (j = 1; j < this.width; j += 1) {\n    signSpace = \"\\t\";\n    firstRowString += signSpace;\n    firstRowString += spacePerColumn[j];\n    firstRowString += firstRow[j].toFixed(digitPrecision);\n  }\n\n  signSpace = \"\\t\";\n  firstRowString += signSpace + spacePerColumn[0] + firstRow[0].toFixed(digitPrecision);\n  console.log(firstRowString + \"\\tZ\"); // Then the basic variable rowByVarIndex\n\n  for (r = 1; r < this.height; r += 1) {\n    row = this.matrix[r];\n    rowString = \"\\t\"; ///////////\n\n    /*for (c = 1; c < this.width; c += 1) {\r\n        signSpace = row[c] < 0 ? \"\" : \" \";\r\n        rowString += signSpace + spacePerColumn[c] + row[c].toFixed(2);\r\n    }\r\n    signSpace = row[0] < 0 ? \"\" : \" \";\r\n    rowString += signSpace + spacePerColumn[0] + row[0].toFixed(2);*/\n    ///////////\n\n    for (c = 1; c < this.width; c += 1) {\n      signSpace = \"\\t\";\n      rowString += signSpace + spacePerColumn[c] + row[c].toFixed(digitPrecision);\n    }\n\n    signSpace = \"\\t\";\n    rowString += signSpace + spacePerColumn[0] + row[0].toFixed(digitPrecision);\n    varIndex = this.varIndexByRow[r];\n    variable = this.variablesPerIndex[varIndex];\n\n    if (variable === undefined) {\n      varName = \"c\" + varIndex;\n    } else {\n      varName = variable.id;\n    }\n\n    console.log(rowString + \"\\t\" + varName);\n  }\n\n  console.log(\"\"); // Then reduced costs for optional objectives\n\n  var nOptionalObjectives = this.optionalObjectives.length;\n\n  if (nOptionalObjectives > 0) {\n    console.log(\"    Optional objectives:\");\n\n    for (var o = 0; o < nOptionalObjectives; o += 1) {\n      var reducedCosts = this.optionalObjectives[o].reducedCosts;\n      var reducedCostsString = \"\";\n\n      for (j = 1; j < this.width; j += 1) {\n        signSpace = reducedCosts[j] < 0 ? \"\" : \" \";\n        reducedCostsString += signSpace;\n        reducedCostsString += spacePerColumn[j];\n        reducedCostsString += reducedCosts[j].toFixed(digitPrecision);\n      }\n\n      signSpace = reducedCosts[0] < 0 ? \"\" : \" \";\n      reducedCostsString += signSpace + spacePerColumn[0] + reducedCosts[0].toFixed(digitPrecision);\n      console.log(reducedCostsString + \" z\" + o);\n    }\n  }\n\n  console.log(\"Feasible?\", this.feasible);\n  console.log(\"evaluation\", this.evaluation);\n  return this;\n};","map":null,"metadata":{},"sourceType":"script"}