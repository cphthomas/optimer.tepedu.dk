{"ast":null,"code":"/*global describe*/\n\n/*global require*/\n\n/*global it*/\n\n/*global console*/\n\n/*global process*/\n\n/*global exports*/\n\n/*global Promise*/\n// LP SOLVE CLI REFERENCE:\n// http://lpsolve.sourceforge.net/5.5/lp_solve.htm\n//\n//\n// var reformat = require(\"./Reformat.js\");\nexports.reformat = require(\"./Reformat.js\");\n\nfunction clean_data(data) {\n  //\n  // Clean Up\n  // And Reformatting...\n  //\n  data = data.replace(\"\\\\r\\\\n\", \"\\r\\n\");\n  data = data.split(\"\\r\\n\");\n  data = data.filter(function (x) {\n    var rx; //\n    // Test 1\n\n    rx = new RegExp(\" 0$\", \"gi\");\n\n    if (rx.test(x) === true) {\n      return false;\n    } //\n    // Test 2\n\n\n    rx = new RegExp(\"\\\\d$\", \"gi\");\n\n    if (rx.test(x) === false) {\n      return false;\n    }\n\n    return true;\n  }).map(function (x) {\n    return x.split(/\\:{0,1} +(?=\\d)/);\n  }).reduce(function (o, k, i) {\n    o[k[0]] = k[1];\n    return o;\n  }, {});\n  return data;\n}\n\nexports.solve = function (model) {\n  //\n  return new Promise(function (res, rej) {\n    //\n    // Exit if we're in the browser...\n    //\n    if (typeof window !== \"undefined\") {\n      rej(\"Function Not Available in Browser\");\n    } //\n    // Convert JSON model to lp_solve format\n    //\n\n\n    var data = require(\"./Reformat.js\")(model);\n\n    if (!model.external) {\n      rej(\"Data for this function must be contained in the 'external' attribute. Not seeing anything there.\");\n    } // \n    // In the args, they *SHALL* have provided an executable\n    // path to the solver they're piping the data into\n    //\n\n\n    if (!model.external.binPath) {\n      rej(\"No Executable | Binary path provided in arguments as 'binPath'\");\n    } //\n    // They also need to provide an arg_array\n    //\n\n\n    if (!model.external.args) {\n      rej(\"No arguments array for cli | bash provided on 'args' attribute\");\n    } //\n    // They also need a tempName so we know where to store\n    // the temp file we're creating...\n    //\n\n\n    if (!model.external.tempName) {\n      rej(\"No 'tempName' given. This is necessary to produce a staging file for the solver to operate on\");\n    } //\n    // To my knowledge, in Windows, you cannot directly pipe text into\n    // an exe...\n    //\n    // Thus, our process looks like this...\n    //\n    // 1.) Convert a model to something an external solver can use\n    // 2.) Save the results from step 1 as a temp-text file\n    // 3.) Pump the results into an exe | whatever-linux-uses\n    // 4.) \n    // \n    //\n\n\n    var fs = require(\"fs\");\n\n    fs.writeFile(model.external.tempName, data, function (fe, fd) {\n      if (fe) {\n        rej(fe);\n      } else {\n        //\n        // So it looks like we wrote to a file and closed it.\n        // Neat.\n        //\n        // Now we need to execute our CLI...\n        var exec = require(\"child_process\").execFile; //\n        // Put the temp file name in the args array...\n        //\n\n\n        model.external.args.push(model.external.tempName);\n        exec(model.external.binPath, model.external.args, function (e, data) {\n          if (e) {\n            if (e.code === 1) {\n              res(clean_data(data));\n            } else {\n              var codes = {\n                \"-2\": \"Out of Memory\",\n                \"1\": \"SUBOPTIMAL\",\n                \"2\": \"INFEASIBLE\",\n                \"3\": \"UNBOUNDED\",\n                \"4\": \"DEGENERATE\",\n                \"5\": \"NUMFAILURE\",\n                \"6\": \"USER-ABORT\",\n                \"7\": \"TIMEOUT\",\n                \"9\": \"PRESOLVED\",\n                \"25\": \"ACCURACY ERROR\",\n                \"255\": \"FILE-ERROR\"\n              };\n              var ret_obj = {\n                \"code\": e.code,\n                \"meaning\": codes[e.code],\n                \"data\": data\n              };\n              rej(ret_obj);\n            }\n          } else {\n            // And finally...return it.\n            res(clean_data(data));\n          }\n        });\n      }\n    });\n  });\n};\n/*\r\nmodel.external = {\r\n    \"binPath\": \"C:/lpsolve/lp_solve.exe\",\r\n    \"tempName\": \"C:/temp/out.txt\",\r\n    \"args\": [\r\n        \"-S2\"\r\n    ]\r\n    \r\n}\r\n\r\n*/","map":null,"metadata":{},"sourceType":"script"}